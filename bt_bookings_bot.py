#!/usr/bin/env python3
"""
BookTable Bookings Bot - –ë–æ—Ç –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
"""

import logging
import asyncio
import uuid
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MenuButtonCommands
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from telegram.constants import ChatAction
from src.bot.database.connection import get_db_connection
from src.bot.ai.translation import translate_message, detect_language, translate_text
from psycopg2.extras import DictCursor

# API —Ç–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
BOOKINGS_BOT_TOKEN = "7753935644:AAH9CNbhe1sptlJj8VFtg7aQRSKnRNswqf8"

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
with open('messages/bookings_bot_messages.txt', 'r', encoding='utf-8') as f:
    BOOKINGS_MESSAGES = json.load(f)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler("logs/bookings_bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.info("Starting BookTable Bookings Bot for restaurant managers")

async def translate_bookings_message(message_key, language, **kwargs):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    try:
        base = BOOKINGS_MESSAGES.get(message_key, '')
        if not base:
            logger.error(f"[BOOKINGS_TRANSLATE] Message not found: {message_key}")
            return message_key
            
        # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if kwargs:
            try:
                base = base.format(**kwargs)
            except KeyError as e:
                logger.error(f"[BOOKINGS_TRANSLATE] Format error: {e}")
        
        # –ï—Å–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if language == 'en':
            return base
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ AI
        translated = await translate_text(base, language)
        logger.info(f"[BOOKINGS_TRANSLATE] Translated to {language}: {translated}")
        return translated
        
    except Exception as e:
        logger.error(f"[BOOKINGS_TRANSLATE] Error: {e}")
        return BOOKINGS_MESSAGES.get(message_key, message_key)

async def translate_booking_status(status, language):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ"""
    status_translations = {
        'pending': {
            'ru': '–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'en': 'pending confirmation',
            'fr': 'en attente de confirmation',
            'ar': 'ŸÅŸä ÿßŸÜÿ™ÿ∏ÿßÿ± ÿßŸÑÿ™ÿ£ŸÉŸäÿØ',
            'zh': 'Á≠âÂæÖÁ°ÆËÆ§',
            'th': '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô'
        },
        'confirmed': {
            'ru': '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ',
            'en': 'confirmed',
            'fr': 'confirm√©',
            'ar': 'ŸÖÿ§ŸÉÿØ',
            'zh': 'Â∑≤Á°ÆËÆ§',
            'th': '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
        },
        'cancelled': {
            'ru': '–æ—Ç–º–µ–Ω–µ–Ω–æ',
            'en': 'cancelled',
            'fr': 'annul√©',
            'ar': 'ŸÖŸÑÿ∫Ÿâ',
            'zh': 'Â∑≤ÂèñÊ∂à',
            'th': '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß'
        }
    }
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if status.lower() in status_translations and language in status_translations[status.lower()]:
        return status_translations[status.lower()][language]
    
    # –ò–Ω–∞—á–µ AI –ø–µ—Ä–µ–≤–æ–¥
    return await translate_text(status, language)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
    user = update.effective_user
    user_id = user.id
    username = user.username
    
    logger.info(f"[BOOKINGS_BOT] Start command from user {user_id} (@{username})")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = [
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton("English", callback_data="lang_en")
        ],
        [
            InlineKeyboardButton("Fran√ßais", callback_data="lang_fr"),
            InlineKeyboardButton("ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", callback_data="lang_ar")
        ],
        [
            InlineKeyboardButton("‰∏≠Êñá", callback_data="lang_zh"),
            InlineKeyboardButton("‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", callback_data="lang_th")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    
    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—Å–µ–≥–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º + —Ä—É—Å—Å–∫–æ–º –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è)
    welcome_text = BOOKINGS_MESSAGES["welcome_choose_language"]
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    context.user_data['awaiting_language'] = True
    context.user_data['user_id'] = user_id
    context.user_data['username'] = username

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        lang = query.data.split('_')[1]
        logger.info(f"[BOOKINGS_BOT] Language selected: {lang}")
        
        context.user_data['language'] = lang
        context.user_data['awaiting_language'] = False
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
        await query.message.delete()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        user_id = context.user_data['user_id']
        username = context.user_data['username']
        
        authorized = await check_manager_authorization(user_id, username)
        
        if authorized:
            restaurants = authorized  # –°–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            context.user_data['authorized'] = True
            context.user_data['restaurants'] = restaurants
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            restaurant_list = '\n'.join([f"üçΩÔ∏è {r['name']}" for r in restaurants])
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
            welcome_base = await translate_bookings_message('welcome_authorized', lang)
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_message = welcome_base.format(restaurants=restaurant_list)
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤
            button_text = await translate_bookings_message('button_show_orders', lang)
            keyboard = [[InlineKeyboardButton(button_text, callback_data="show_recent_bookings")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=user_id, 
                text=welcome_message, 
                reply_markup=reply_markup
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            restaurant_names = [r['name'] for r in restaurants]
            logger.info(f"[BOOKINGS_BOT] Manager {username} ({user_id}) authorized for restaurants: {restaurant_names}")
            
        else:
            # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            error_message = await translate_bookings_message(
                'access_denied', 
                lang, 
                username=username or 'username'
            )
            
            await context.bot.send_message(chat_id=user_id, text=error_message)
            logger.warning(f"[BOOKINGS_BOT] Unauthorized access attempt from {username} ({user_id})")
            
    except Exception as e:
        logger.error(f"[BOOKINGS_BOT] Error in language_callback: {e}")
        error_msg = await translate_bookings_message('error_occurred', context.user_data.get('language', 'en'))
        await query.message.reply_text(error_msg)

async def check_manager_authorization(user_id, username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=DictCursor)
        
        # –ò—â–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –≥–¥–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç
        contact_patterns = []
        params = []
        
        if username:
            contact_patterns.append("booking_contact = %s")
            params.append(f"@{username}")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ user_id (–µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω –∫–∞–∫ chat_id)
        contact_patterns.append("booking_contact = %s")
        params.append(str(user_id))
        
        if not contact_patterns:
            return False
        
        query = f"""
            SELECT name, booking_contact, location
            FROM restaurants 
            WHERE active = 'TRUE' AND ({' OR '.join(contact_patterns)})
            ORDER BY name
        """
        
        logger.info(f"[BOOKINGS_BOT] Authorization query: {query} with params: {params}")
        cur.execute(query, params)
        restaurants = cur.fetchall()
        
        cur.close()
        conn.close()
        
        if restaurants:
            return [dict(r) for r in restaurants]
        else:
            return False
            
    except Exception as e:
        logger.error(f"[BOOKINGS_BOT] Error checking authorization: {e}")
        return False

async def show_recent_bookings_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('authorized'):
        error_msg = await translate_bookings_message('not_authorized', context.user_data.get('language', 'en'))
        await query.edit_message_text(error_msg)
        return
    
    language = context.user_data.get('language', 'en')
    restaurants = context.user_data.get('restaurants', [])
    restaurant_names = [r['name'] for r in restaurants]
    
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=DictCursor)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        cur.execute("""
            SELECT booking_number, restaurant, client_name, date, time, guests, status, preferences
            FROM bookings 
            WHERE restaurant = ANY(%s)
            ORDER BY booking_number DESC
            LIMIT 10
        """, (restaurant_names,))
        
        bookings = cur.fetchall()
        
        if bookings:
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            message = await translate_bookings_message('recent_bookings_title', language)
            message += "\n\n"
            
            for booking in bookings:
                prefs = booking['preferences'] or ""
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
                status_translated = await translate_booking_status(booking['status'], language)
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —à–∞–±–ª–æ–Ω—ã –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if prefs:
                    prefs_translated = await translate_text(prefs, language)
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —à–∞–±–ª–æ–Ω –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    booking_template = await translate_bookings_message('booking_item_with_prefs', language)
                    booking_text = booking_template.format(
                        booking_number=booking['booking_number'],
                        restaurant=booking['restaurant'],  # –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                        client_name=booking['client_name'],
                        date=booking['date'].strftime('%d.%m.%Y'),
                        time=booking['time'].strftime('%H:%M'),
                        guests=booking['guests'],
                        status=status_translated,
                        preferences=prefs_translated
                    )
                else:
                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —à–∞–±–ª–æ–Ω –±–µ–∑ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
                    booking_template = await translate_bookings_message('booking_item', language)
                    booking_text = booking_template.format(
                        booking_number=booking['booking_number'],
                        restaurant=booking['restaurant'],  # –ù–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
                        client_name=booking['client_name'],
                        date=booking['date'].strftime('%d.%m.%Y'),
                        time=booking['time'].strftime('%H:%M'),
                        guests=booking['guests'],
                        status=status_translated
                    )
                
                message += booking_text + "\n\n"
        else:
            message = await translate_bookings_message('no_bookings', language)
        
        # –ë–µ–∑ –∫–Ω–æ–ø–æ–∫ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        await query.edit_message_text(message)
        
        cur.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"[BOOKINGS_BOT] Error showing recent bookings: {e}")
        error_msg = await translate_bookings_message('error_occurred', language)
        await query.edit_message_text(error_msg)

async def show_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    query = update.callback_query
    await query.answer()
    
    if not context.user_data.get('authorized'):
        error_msg = await translate_bookings_message('not_authorized', context.user_data.get('language', 'en'))
        await query.edit_message_text(error_msg)
        return
    
    language = context.user_data.get('language', 'en')
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    button_text = await translate_bookings_message('button_show_orders', language)
    keyboard = [[InlineKeyboardButton(button_text, callback_data="show_recent_bookings")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    action_text = await translate_bookings_message('choose_action', language)
    await query.edit_message_text(action_text, reply_markup=reply_markup)

async def restart_bot_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.delete()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    context.user_data.clear()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ update –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ start
    fake_update = Update(
        update_id=query.message.message_id,
        message=query.message
    )
    
    await start(fake_update, context)

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    context.user_data.clear()
    await start(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if context.user_data.get('awaiting_language'):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –≤–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏
        try:
            text = update.message.text.strip()
            detected_lang = await detect_language(text)
            
            logger.info(f"[BOOKINGS_BOT] Detected language from text: {detected_lang}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
            context.user_data['language'] = detected_lang
            context.user_data['awaiting_language'] = False
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            user_id = context.user_data['user_id']
            username = context.user_data['username']
            
            authorized = await check_manager_authorization(user_id, username)
            
            if authorized:
                restaurants = authorized
                context.user_data['authorized'] = True
                context.user_data['restaurants'] = restaurants
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                restaurant_list = '\n'.join([f"üçΩÔ∏è {r['name']}" for r in restaurants])
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
                welcome_base = await translate_bookings_message('welcome_authorized', detected_lang)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_message = welcome_base.format(restaurants=restaurant_list)
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤
                button_text = await translate_bookings_message('button_show_orders', detected_lang)
                keyboard = [[InlineKeyboardButton(button_text, callback_data="show_recent_bookings")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(welcome_message, reply_markup=reply_markup)
            else:
                error_message = await translate_bookings_message(
                    'access_denied', 
                    detected_lang, 
                    username=username or 'username'
                )
                await update.message.reply_text(error_message)
                
        except Exception as e:
            logger.error(f"[BOOKINGS_BOT] Error in message handler: {e}")
            error_msg = await translate_bookings_message('error_occurred', 'en')
            await update.message.reply_text(error_msg)
        return
    
    if not context.user_data.get('authorized'):
        lang = context.user_data.get('language', 'en')
        error_msg = await translate_bookings_message('please_start', lang)
        await update.message.reply_text(error_msg)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    language = context.user_data.get('language', 'en')
    
    action_text = await translate_bookings_message('choose_action', language)
    button_text = await translate_bookings_message('button_show_orders', language)
    
    keyboard = [[InlineKeyboardButton(button_text, callback_data="show_recent_bookings")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(action_text, reply_markup=reply_markup)

async def send_booking_notification(booking_number, booking_data, restaurant_name, user_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=DictCursor)
        
        cur.execute("""
            SELECT booking_contact
            FROM restaurants 
            WHERE name = %s AND active = 'TRUE'
        """, (restaurant_name,))
        
        result = cur.fetchone()
        if not result or not result['booking_contact']:
            logger.warning(f"[BOOKINGS_BOT] No booking contact for restaurant {restaurant_name}")
            return False
        
        booking_contact = result['booking_contact']
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        client_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
        if not client_name:
            client_name = user_data.get('username', f"User_{user_data.get('id', 'Unknown')}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)
        message = BOOKINGS_MESSAGES["new_booking_notification"].format(
            booking_number=booking_number,
            restaurant=restaurant_name,
            client_name=client_name,
            date=booking_data['date'].strftime('%d.%m.%Y'),
            time=booking_data['time'].strftime('%H:%M'),
            guests=booking_data['guests'],
            username=user_data.get('username', user_data.get('id', 'Unknown'))
        )
        
        logger.info(f"[BOOKINGS_BOT] Booking notification prepared for {restaurant_name}: {message}")
        return True
        
        cur.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"[BOOKINGS_BOT] Error sending booking notification: {e}")
        return False

async def set_bot_commands(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    commands = [
        ("restart", "Restart the bot")
    ]
    
    await app.bot.set_my_commands(commands)
    await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    app = ApplicationBuilder().token(BOOKINGS_BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    
    # Callback handlers
    app.add_handler(CallbackQueryHandler(language_callback, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(show_recent_bookings_callback, pattern="^show_recent_bookings$"))
    app.add_handler(CallbackQueryHandler(show_menu_callback, pattern="^show_menu$"))
    app.add_handler(CallbackQueryHandler(restart_bot_callback, pattern="^restart_bot$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    app.post_init = set_bot_commands
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("[BOOKINGS_BOT] Starting BookTable Bookings Bot...")
    app.run_polling()

if __name__ == '__main__':
    main() 