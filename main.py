#!/usr/bin/env python
"""
BookTable Bot - –ú–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
"""

import logging
import uuid
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup, MenuButtonCommands
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
from telegram.constants import ChatAction
from src.bot.database.connection import get_db_connection
from psycopg2.extras import DictCursor

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from src.bot.config import VERSION, TELEGRAM_TOKEN
from src.bot.database.users import save_user_to_db, get_user_preferences
from src.bot.managers.user_state import UserState
from src.bot.ai.core import ask, restaurant_chat, detect_area_from_text, general_chat, is_about_restaurants
from src.bot.ai.translation import translate_message, detect_language, translate_text
from src.bot.constants import PHUKET_AREAS
from src.bot.utils.geo import get_nearest_area
from src.bot.managers.restaurant_display import show_restaurants
from src.bot.handlers.booking_handlers import (
    book_restaurant_callback, book_restaurant_select_callback,
    book_time_callback, book_guests_callback, book_date_callback,
    handle_custom_time_input, handle_custom_date_input, handle_booking_preferences
)
from src.bot.managers.booking_manager import BookingManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG,
    handlers=[
        logging.FileHandler("logs/bot.log"),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
logger.info(f"Starting BookTable bot version {VERSION}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    
    # –ü–µ—Ä–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text(
        f'Hello and welcome to BookTable.AI v{VERSION}!\n'
        'I will help you find the perfect restaurant in Phuket and book a table in seconds.'
    )

    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    keyboard = [
        [
            InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
            InlineKeyboardButton("English", callback_data="lang_en")
        ],
        [
            InlineKeyboardButton("Fran√ßais", callback_data="lang_fr"),
            InlineKeyboardButton("ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", callback_data="lang_ar")
        ],
        [
            InlineKeyboardButton("‰∏≠Êñá", callback_data="lang_zh"),
            InlineKeyboardButton("‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢", callback_data="lang_th")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        'Please choose your language or just type a message ‚Äî I understand more than 120 languages and will reply in yours!',
        reply_markup=reply_markup
    )

    context.user_data['awaiting_language'] = True
    context.user_data['chat_log'] = []
    context.user_data['sessionid'] = str(uuid.uuid4())
    logger.info("New session with %s", user.username)

async def language_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    try:
        lang = query.data.split('_')[1]
        logger.info(f"[LANGUAGE] Setting language to {lang}")
        context.user_data['language'] = lang
        context.user_data['awaiting_language'] = False
        await query.message.delete()
        
        user = update.effective_user
        save_user_to_db(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            language=lang
        )
        logger.info(f"User saved to database")
        
        await context.bot.send_chat_action(chat_id=update.effective_user.id, action=ChatAction.TYPING)
        await asyncio.sleep(1)
        
        welcome_message = await translate_message('welcome', lang)
        if query.message:
            welcome_msg = await query.message.reply_text(welcome_message)
        else:
            welcome_msg = await context.bot.send_message(chat_id=update.effective_user.id, text=welcome_message)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
        context.user_data['welcome_message_id'] = welcome_msg.message_id
        
        await show_budget_buttons(update, context)
    except Exception as e:
        logger.error(f"Error in language_callback: {e}")
        try:
            if hasattr(query, 'message') and query.message:
                await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            else:
                await context.bot.send_message(chat_id=update.effective_user.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception as send_e:
            logger.error(f"Failed to send error message: {send_e}")

async def show_budget_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç BudgetManager"""
    from src.bot.managers.budget_manager import BudgetManager
    await BudgetManager.show_budget_selection(update, context)

async def budget_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç BudgetManager"""
    budget_number = update.callback_query.data.split('_')[1]
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–ª–∞—Ä–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    budget_map = {
        '1': '$',
        '2': '$$',
        '3': '$$$',
        '4': '$$$$'
    }
    budget = budget_map.get(budget_number, budget_number)
    
    logger.info(f"[BUDGET_CALLBACK] Converting budget_number={budget_number} to budget={budget}")
    
    from src.bot.managers.budget_manager import BudgetManager
    await BudgetManager.handle_budget_change(update, context, budget)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞
    await context.bot.set_my_commands([
        ("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("new_search", "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"),
        ("filter", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç")
    ])

async def show_location_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LocationManager"""
    from src.bot.managers.location_manager import LocationManager
    await LocationManager.show_location_selection(update, context)

async def location_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data.get('language', 'ru')
    chat_id = query.message.chat_id
    
    await query.message.delete()
    
    if query.data == 'location_near':
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(1)
        keyboard = [[KeyboardButton("üìç –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        msg = await translate_message('location_send', language)
        await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=reply_markup)
        context.user_data['awaiting_location_or_area'] = True
        return
    elif query.data == 'location_area':
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(1)
        
        areas = list(PHUKET_AREAS.items())
        keyboard = []
        for i in range(0, len(areas), 2):
            row = []
            row.append(InlineKeyboardButton(areas[i][1], callback_data=f'area_{areas[i][0]}'))
            if i + 1 < len(areas):
                row.append(InlineKeyboardButton(areas[i+1][1], callback_data=f'area_{areas[i+1][0]}'))
            keyboard.append(row)
        reply_markup = InlineKeyboardMarkup(keyboard)
        msg = await translate_message('choose_area_instruction', language)
        await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=reply_markup)
        context.user_data['awaiting_location_or_area'] = True
    elif query.data == 'location_any':
        await context.bot.send_chat_action(chat_id=chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(1)
        context.user_data['location'] = 'any'
        msg = await translate_message('location_any_confirmed', language)
        await context.bot.send_message(chat_id=chat_id, text=msg)
        
        # –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å AI
        q = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫, –±—é–¥–∂–µ—Ç –∏ –ª—é–±–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ. –ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥." if language == 'ru' else "User selected language, budget and any location on the island. Start the conversation."
        try:
            chat_log = context.user_data.get('chat_log', [])
            a, chat_log = await ask(q, chat_log, language)
            context.user_data['chat_log'] = chat_log
            await context.bot.send_message(chat_id=chat_id, text=a)
        except Exception as e:
            logger.error(f"Error in ask: {e}")
            error_message = await translate_message('error', language)
            await context.bot.send_message(chat_id=chat_id, text=error_message)

async def area_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data.get('language', 'ru')
    area_id = query.data[len('area_'):]
    chat_id = query.message.chat_id
    
    await query.message.delete()
    
    if area_id == 'other':
        other_message = await translate_message('other_area_prompt', language)
        await context.bot.send_message(chat_id=chat_id, text=other_message)
        context.user_data['awaiting_area_input'] = True
        return
    
    area_name = PHUKET_AREAS[area_id]
    context.user_data['location'] = {'area': area_id, 'name': area_name}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
    await show_restaurants(update, context)

async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    text = update.message.text.strip()
    language = context.user_data.get('language', 'en')
    
    logger.info(f"[TALK] User {user.id} sent message: {text}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–≤–æ–¥ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏/–¥–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if await handle_custom_time_input(update, context):
        return
    if await handle_custom_date_input(update, context):
        return
    if await handle_booking_preferences(update, context):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    booking_intent = await _detect_booking_intent(text, language)
    if booking_intent:
        await BookingManager.start_booking_from_chat(update, context, text)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = UserState(context)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–ª –±—é–¥–∂–µ—Ç, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not state.budget:
        logger.info(f"[TALK] User {user.username} sent message without budget selected, ignoring")
        return

    detected_lang = await detect_language(text)
    language = context.user_data.get('language', detected_lang)
    
    logger.info("Processing message from %s: %s", user.username, text)
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    if context.user_data.get('awaiting_language'):
        context.user_data['awaiting_language'] = False
        save_user_to_db(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            language=detected_lang
        )
        logger.info(f"User saved to database")
        
        await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(1)
        
        welcome_message = await translate_message('welcome', detected_lang)
        await update.message.reply_text(welcome_message)
        
        await show_budget_buttons(update, context)
        return
                        
    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
    if context.user_data.get('awaiting_restaurant_question'):
        context.user_data['awaiting_restaurant_question'] = False
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ —á–µ—Ä–µ–∑ AI
        restaurant_info = context.user_data.get('restaurant_info', '')
        
        await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
        await asyncio.sleep(1)
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
            response = await restaurant_chat(text, restaurant_info, language, context)
            await update.message.reply_text(response)
        except Exception as e:
            logger.error(f"Error in restaurant_chat: {e}")
            error_msg = await translate_message('error', language)
            await update.message.reply_text(error_msg)
        return

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —Ä–∞–π–æ–Ω–∞
    if context.user_data.get('awaiting_area_input'):
        context.user_data['awaiting_area_input'] = False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞
        area_key = await detect_area_from_text(text, language)
        
        if area_key:
            area_name = PHUKET_AREAS.get(area_key, text)
            context.user_data['location'] = {'area': area_key, 'name': area_name}
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
            await show_restaurants(update, context)
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞
            await show_location_selection(update, context)
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await context.bot.send_chat_action(chat_id=update.message.chat_id, action=ChatAction.TYPING)
    await asyncio.sleep(1)
    
    try:
        response, chat_log = await ask(text, context.user_data.get('chat_log'), language)
        context.user_data['chat_log'] = chat_log
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"Error in talk: {e}")
        error_msg = await translate_message('error', language)
        await update.message.reply_text(error_msg)

# –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞: —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
    context.user_data.clear()
    await start(update, context)

async def new_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç"""
    logger.info("[NEW_SEARCH] Starting new search")
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
    preferences = get_user_preferences(user_id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç
    if preferences and preferences.get('budget'):
        context.user_data['budget'] = preferences['budget']
    else:
        # –ï—Å–ª–∏ –±—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å
        await show_budget_buttons(update, context)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏
    await show_location_selection(update, context)

async def set_bot_commands(app):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    commands = [
        ("restart", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        ("new_search", "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫")
    ]
    
    await app.bot.set_my_commands(commands)
    await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    try:
        location = update.message.location
        language = context.user_data.get('language', 'ru')
        
        logger.info(f"[LOCATION] Received coordinates: {location.latitude}, {location.longitude}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['location'] = {
            'coordinates': (location.latitude, location.longitude),
            'latitude': location.latitude,
            'longitude': location.longitude
        }
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –≥–µ–æ–∫–æ–¥–µ—Ä–∞)
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute(
                "UPDATE users SET coordinates = POINT(%s, %s), user_coords = %s WHERE telegram_user_id = %s",
                (location.longitude, location.latitude, f"{location.latitude},{location.longitude}", update.effective_user.id)
            )
            conn.commit()
            cur.close()
            conn.close()
        except Exception as e:
            logger.error(f"Error saving coordinates to database: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–∞–π–æ–Ω
        nearest_area = get_nearest_area(location.latitude, location.longitude)
        
        if nearest_area:
            area_name = PHUKET_AREAS[nearest_area]
            context.user_data['location'] = {'area': nearest_area, 'name': area_name}
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
            await show_restaurants(update, context)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –≤—Ä—É—á–Ω—É—é.")
            
    except Exception as e:
        logger.error(f"[LOCATION] Error handling location: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–π–æ–Ω –≤—Ä—É—á–Ω—É—é.")

async def ask_about_restaurant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–æ–ø—Ä–æ—Å –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ'"""
    query = update.callback_query
    await query.answer()
    
    language = context.user_data.get('language', 'ru')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
    prompt_msg = await translate_message('ask_question_prompt', language)
    await query.message.reply_text(prompt_msg)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    context.user_data['awaiting_restaurant_question'] = True

async def choose_area_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞"""
    query = update.callback_query
    await query.answer()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.delete()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
    areas = list(PHUKET_AREAS.items())
    keyboard = []
    for i in range(0, len(areas), 2):
        row = []
        row.append(InlineKeyboardButton(areas[i][1], callback_data=f'area_{areas[i][0]}'))
        if i + 1 < len(areas):
            row.append(InlineKeyboardButton(areas[i+1][1], callback_data=f'area_{areas[i+1][0]}'))
        keyboard.append(row)
    reply_markup = InlineKeyboardMarkup(keyboard)
    language = context.user_data.get('language', 'ru')
    msg = await translate_message('choose_area_instruction', language)
    await query.message.reply_text(msg, reply_markup=reply_markup)

async def show_other_price_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
    query = update.callback_query
    await query.answer()
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏: {e}")
    
    location = context.user_data.get('location')
    budget = context.user_data.get('budget')
    language = context.user_data.get('language', 'ru')
    
    if not isinstance(location, dict) or 'area' not in location:
        await update.effective_chat.send_message("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–π–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤.")
        return
    
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=DictCursor)
        
        area_key = location['area']
        from src.bot.constants import AREA_DB_MAPPING
        db_area_name = AREA_DB_MAPPING.get(area_key, location.get('name', ''))
        
        cur.execute(
            """
            SELECT name, average_check, location FROM restaurants
            WHERE LOWER(location) ILIKE %s
            AND average_check::text != %s AND active ILIKE 'true'
            ORDER BY name
            """,
            (f"%{db_area_name.lower()}%", budget)
        )
        rows = cur.fetchall()
        
        if not rows:
            await update.effective_chat.send_message("–í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –Ω–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö
        names = tuple([r['name'] for r in rows])
        cur.execute(
            """
            SELECT name, average_check, cuisine, features, atmosphere, story_or_concept
            FROM restaurants
            WHERE name IN %s
            """,
            (names,)
        )
        details = {r['name']: r for r in cur.fetchall()}
        
        msg = "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ —Å –¥—Ä—É–≥–∏–º —Å—Ä–µ–¥–Ω–∏–º —á–µ–∫–æ–º:\n\n"
        for r in rows:
            d = details.get(r['name'], {})
            cuisine = d.get('cuisine') or ''
            features = d.get('features')
            if isinstance(features, list):
                features = ', '.join(features)
            elif features is None:
                features = ''
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º cuisine –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            if language != 'en':
                try:
                    if cuisine:
                        from src.bot.managers.restaurant_display import translate_cuisine
                        cuisine = await translate_cuisine(cuisine, language)
                    if features:
                        features = await translate_text(features, language)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞: {e}")
            
            msg += f"‚Ä¢ {r['name']} ‚Äî {r['average_check']}\n"
            if cuisine:
                msg += f"{cuisine}\n"
            if features:
                msg += f"{features}\n"
            msg += "\n"
        
        await update.effective_chat.send_message(msg)
        
        cur.close()
        conn.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_other_price_callback: {e}")
        await update.effective_chat.send_message(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")

async def book_restaurant_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç BookingManager"""
    from src.bot.handlers.booking_handlers import book_restaurant_callback as new_handler
    await new_handler(update, context)

async def change_budget_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞"""
    query = update.callback_query
    await query.answer()
    await query.message.delete()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞
    state = UserState(context)
    return_context = {
        'screen': 'restaurant_list',
        'budget': state.budget,
        'location': state.location,
        'language': state.language
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –≤–æ–∑–≤—Ä–∞—Ç–∞
    from src.bot.managers.budget_manager import BudgetManager
    await BudgetManager.show_budget_selection(update, context, return_context)

async def check_budget(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—é–¥–∂–µ—Ç"""
    language = context.user_data.get('language', 'ru')
    budget = context.user_data.get('budget')
    
    if budget:
        message = await translate_message('current_budget', language, budget=budget)
    else:
        message = await translate_message('no_budget', language)
    
    await update.message.reply_text(message)

async def _detect_booking_intent(text, language):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        booking_keywords = {
            'en': ['book', 'reserve', 'reservation', 'table', 'booking'],
            'ru': ['–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å', '—Ä–µ–∑–µ—Ä–≤', '–±—Ä–æ–Ω—å', '—Å—Ç–æ–ª–∏–∫', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ']
        }
        
        text_lower = text.lower()
        keywords = booking_keywords.get(language, booking_keywords['en'])
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        return any(keyword in text_lower for keyword in keywords)
        
    except Exception as e:
        logger.error(f"[BOOKING] Error detecting booking intent: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("new_search", new_search))
    app.add_handler(CommandHandler("filter", check_budget))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    app.add_handler(CallbackQueryHandler(language_callback, pattern="^lang_"))
    app.add_handler(CallbackQueryHandler(budget_callback, pattern="^budget_"))
    app.add_handler(CallbackQueryHandler(location_callback, pattern="^location_"))
    app.add_handler(CallbackQueryHandler(area_callback, pattern="^area_"))
    app.add_handler(CallbackQueryHandler(ask_about_restaurant_callback, pattern="^ask_about_restaurant$"))
    app.add_handler(CallbackQueryHandler(choose_area_callback, pattern="^choose_area$"))
    app.add_handler(CallbackQueryHandler(show_other_price_callback, pattern="^show_other_price$"))
    app.add_handler(CallbackQueryHandler(book_restaurant_callback, pattern="^book_restaurant$"))
    app.add_handler(CallbackQueryHandler(book_restaurant_select_callback, pattern="^book_restaurant_\\d+$"))
    app.add_handler(CallbackQueryHandler(book_time_callback, pattern="^book_time_"))
    app.add_handler(CallbackQueryHandler(book_guests_callback, pattern="^book_guests_\\d+$"))
    app.add_handler(CallbackQueryHandler(book_date_callback, pattern="^book_date_"))
    app.add_handler(CallbackQueryHandler(change_budget_callback, pattern="^change_budget$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, talk))
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    app.post_init = set_bot_commands
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == '__main__':
    main() 