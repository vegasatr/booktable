#!/usr/bin/env python3
import asyncio
import psycopg2
from psycopg2.extras import DictCursor
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from context_processor import get_relevant_restaurant_data

async def test_ai_processor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI-–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = psycopg2.connect(
            dbname="booktable",
            user="root",
            host="/var/run/postgresql"
        )
        
        cur = conn.cursor(cursor_factory=DictCursor)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ WeCafe –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        cur.execute("SELECT * FROM restaurants WHERE name ILIKE '%WeCafe%' LIMIT 1")
        result = cur.fetchone()
        
        if not result:
            print("‚ùå WeCafe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        restaurant_data = dict(result)
        restaurants = [restaurant_data]
        
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI-–ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê")
        print("=" * 60)
        print(f"–†–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_data['name']}")
        print(f"–í—Å–µ–≥–æ –ø–æ–ª–µ–π –≤ –ë–î: {len(restaurant_data)}")
        print()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        test_questions = [
            "–∞ –µ—Å—Ç—å —Ç–∞–º –º—è—Å–æ?",
            "–∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏ –ø–æ—Å–µ—â–∞—é—Ç?", 
            "–µ—Å—Ç—å –ª–∏ –¥–µ—Ç—Å–∫–æ–µ –º–µ–Ω—é?",
            "–∫–∞–∫–æ–µ –≤–∏–Ω–æ?",
            "–≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
            "–µ—Å—Ç—å –ª–∏ –≤–µ–≥–∞–Ω—Å–∫–∏–µ –±–ª—é–¥–∞?",
            "–º–æ–∂–Ω–æ –ª–∏ —Å–∏–¥–µ—Ç—å –Ω–∞ —É–ª–∏—Ü–µ?",
            "–ø—Ä–∏–Ω–∏–º–∞—é—Ç –ª–∏ –∫–∞—Ä—Ç—ã?"
        ]
        
        total_original_chars = 0
        total_optimized_chars = 0
        
        for i, question in enumerate(test_questions, 1):
            print(f"üìù –¢–ï–°–¢ {i}: {question}")
            print("-" * 40)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—Å–µ –ø–æ–ª—è)
            original_data = ""
            for key, value in restaurant_data.items():
                if value and str(value).strip() and str(value).strip().lower() not in ['none', 'null', '']:
                    original_data += f"{key.replace('_', ' ').title()}: {value}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ AI
            optimized_data = await get_relevant_restaurant_data(question, restaurants, 'ru')
            
            original_chars = len(original_data)
            optimized_chars = len(optimized_data)
            savings = ((original_chars - optimized_chars) / original_chars * 100) if original_chars > 0 else 0
            
            total_original_chars += original_chars
            total_optimized_chars += optimized_chars
            
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª: {original_chars} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {optimized_chars} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–≠–∫–æ–Ω–æ–º–∏—è: {savings:.1f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
            key_fields_found = []
            if "key_dishes" in optimized_data.lower():
                key_fields_found.append("key_dishes")
            if "celebrity" in optimized_data.lower() or "notable" in optimized_data.lower():
                key_fields_found.append("celebrity_info")
            if "working" in optimized_data.lower() or "hours" in optimized_data.lower():
                key_fields_found.append("working_hours")
            if "wine" in optimized_data.lower() or "cocktail" in optimized_data.lower():
                key_fields_found.append("drinks")
            
            if key_fields_found:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–ª—è: {', '.join(key_fields_found)}")
            else:
                print("‚ö†Ô∏è  –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø–æ–ª—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
            
            print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_savings = ((total_original_chars - total_optimized_chars) / total_original_chars * 100) if total_original_chars > 0 else 0
        
        print("üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 60)
        print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(test_questions)}")
        print(f"–û–±—â–∏–π –æ–±—ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {total_original_chars:,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–û–±—â–∏–π –æ–±—ä–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {total_optimized_chars:,} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {total_savings:.1f}%")
        
        if total_savings > 70:
            print("üéâ –û–¢–õ–ò–ß–ù–û! AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
        elif total_savings > 50:
            print("‚úÖ –•–û–†–û–®–û! AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–µ–º–ª–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        else:
            print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å AI-–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞")
        
        cur.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    asyncio.run(test_ai_processor()) 