#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–£–ß–ù–û–ô FLOW –¢–ï–°–¢ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
============================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–æ–≤ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö.
–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram.

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –î–≤–∞ —Å–ø–æ—Å–æ–±–∞ –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–Ω–æ–ø–∫–∞ –†–ï–ó–ï–†–í + —á–∞—Ç)
- –ü–æ–ª–Ω—ã–π flow: —Ä–µ—Å—Ç–æ—Ä–∞–Ω ‚Üí –≤—Ä–µ–º—è ‚Üí –≥–æ—Å—Ç–∏ ‚Üí –¥–∞—Ç–∞ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
- –û–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –≤–≤–æ–¥–æ–≤ (–≤—Ä–µ–º—è, –¥–∞—Ç–∞)
- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

–ó–ê–ü–£–°–ö: python tests/manual/booking_flow_test.py
"""

import sys
import os
import asyncio
import json
from datetime import date, time, datetime, timedelta
from unittest.mock import Mock, patch, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from src.bot.managers.booking_manager import BookingManager
from src.bot.handlers.booking_handlers import (
    book_restaurant_callback, book_restaurant_select_callback,
    book_time_callback, book_guests_callback, book_date_callback,
    handle_custom_time_input, handle_custom_date_input, handle_booking_preferences
)

class BookingFlowTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è flow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.test_results = []
        self.current_context = {}
        
    def create_mock_update(self, user_id=12345, username="testuser", 
                          first_name="Test", last_name="User"):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç update –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        update = Mock()
        query = Mock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback query
        update.callback_query = query
        query.answer = AsyncMock()
        query.edit_message_text = AsyncMock()
        query.message = Mock()
        query.message.reply_text = AsyncMock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update.effective_user = Mock()
        update.effective_user.id = user_id
        update.effective_user.username = username
        update.effective_user.first_name = first_name
        update.effective_user.last_name = last_name
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞
        update.effective_chat = Mock()
        update.effective_chat.send_message = AsyncMock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.message = Mock()
        update.message.text = ""
        update.message.reply_text = AsyncMock()
        
        return update
    
    def create_mock_context(self, restaurants=None, language='en'):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç context —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        context = Mock()
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if restaurants is None:
            restaurants = [
                {
                    'name': 'Test Italian Restaurant',
                    'cuisine': 'Italian',
                    'working_hours': {'close': '23:00'}
                },
                {
                    'name': 'Test Thai Restaurant', 
                    'cuisine': 'Thai',
                    'working_hours': {'close': '22:00'}
                }
            ]
        
        context.user_data = {
            'language': language,
            'filtered_restaurants': restaurants
        }
        
        return context
    
    async def test_single_restaurant_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ flow —Å –æ–¥–Ω–∏–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º"""
        print("\nüçù –¢–ï–°–¢: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–¥–Ω–∏–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º")
        print("=" * 60)
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            restaurant = {
                'name': 'Solo Restaurant',
                'cuisine': 'Italian',
                'working_hours': {'close': '23:00'}
            }
            
            update = self.create_mock_update()
            context = self.create_mock_context([restaurant])
            
            with patch('src.bot.managers.booking_manager.translate_message', new_callable=AsyncMock) as mock_translate:
                with patch('src.bot.database.bookings.save_booking_to_db', new_callable=AsyncMock) as mock_save:
                    with patch('src.bot.database.bookings.get_restaurant_working_hours', new_callable=AsyncMock) as mock_hours:
                        
                        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–∫–æ–≤
                        mock_translate.side_effect = [
                            "What time should I book the table for?",
                            "For how many guests?",
                            "Are we booking for today?",
                            "Booking confirmed!",
                            "Instructions"
                        ]
                        mock_save.return_value = 100
                        mock_hours.return_value = {'booking_contact': '@test_restaurant'}
                        
                        print("1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞ –†–ï–ó–ï–†–í)")
                        await book_restaurant_callback(update, context)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—á–∞–ª–æ—Å—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                        booking_data = context.user_data.get('booking_data', {})
                        if booking_data.get('restaurant') == restaurant:
                            print("‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
                            return False
                        
                        print("2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è (19:30)")
                        update.callback_query.data = "book_time_19:30"
                        await book_time_callback(update, context)
                        
                        if booking_data.get('time') == time(19, 30):
                            print("‚úÖ –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: 19:30")
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
                            return False
                        
                        print("3Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π (2)")
                        update.callback_query.data = "book_guests_2"
                        await book_guests_callback(update, context)
                        
                        if booking_data.get('guests') == 2:
                            print("‚úÖ –ì–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω—ã: 2")
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Å—Ç–µ–π")
                            return False
                        
                        print("4Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)")
                        update.callback_query.data = "book_date_today"
                        await book_date_callback(update, context)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                        if mock_save.called:
                            save_args = mock_save.call_args[1]
                            print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:")
                            print(f"   - –†–µ—Å—Ç–æ—Ä–∞–Ω: {save_args['restaurant_name']}")
                            print(f"   - –ö–ª–∏–µ–Ω—Ç: {save_args['client_name']}")
                            print(f"   - –í—Ä–µ–º—è: {save_args['time']}")
                            print(f"   - –î–∞—Ç–∞: {save_args['date_booking']}")
                            print(f"   - –ì–æ—Å—Ç–∏: {save_args['guests']}")
                            return True
                        else:
                            print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                            return False
                            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
    
    async def test_multiple_restaurants_flow(self):
        """–¢–µ—Å—Ç flow —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤"""
        print("\nüçï –¢–ï–°–¢: –í—ã–±–æ—Ä –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        print("=" * 60)
        
        try:
            restaurants = [
                {'name': 'Italian Place', 'cuisine': 'Italian'},
                {'name': 'Thai Corner', 'cuisine': 'Thai'},
                {'name': 'French Bistro', 'cuisine': 'French'}
            ]
            
            update = self.create_mock_update()
            context = self.create_mock_context(restaurants)
            
            with patch('src.bot.managers.booking_manager.translate_message', new_callable=AsyncMock) as mock_translate:
                with patch('src.bot.database.bookings.save_booking_to_db', new_callable=AsyncMock) as mock_save:
                    
                    mock_translate.side_effect = [
                        "Which restaurant shall we book a table at?",
                        "What time should I book the table for?",
                        "For how many guests?",
                        "Are we booking for today?",
                        "Booking confirmed!",
                        "Instructions"
                    ]
                    mock_save.return_value = 101
                    
                    print("1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤)")
                    await book_restaurant_callback(update, context)
                    
                    booking_data = context.user_data.get('booking_data', {})
                    if booking_data.get('step') == 'restaurant_selection':
                        print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–∫–∞–∑–µ –≤—ã–±–æ—Ä–∞")
                        return False
                    
                    print("2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω (Thai Corner)")
                    update.callback_query.data = "book_restaurant_1"  # –ò–Ω–¥–µ–∫—Å 1
                    await book_restaurant_select_callback(update, context)
                    
                    if booking_data.get('restaurant') == restaurants[1]:
                        print("‚úÖ –í—ã–±—Ä–∞–Ω Thai Corner")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
                        return False
                    
                    print("3Ô∏è‚É£ –î–∞–ª–µ–µ –≤—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è (20:00)")
                    update.callback_query.data = "book_time_20:00"
                    await book_time_callback(update, context)
                    
                    print("4Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Å—Ç–µ–π (4)")
                    update.callback_query.data = "book_guests_4"
                    await book_guests_callback(update, context)
                    
                    print("5Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É (–∑–∞–≤—Ç—Ä–∞)")
                    update.callback_query.data = "book_date_tomorrow"
                    await book_date_callback(update, context)
                    
                    if mock_save.called:
                        save_args = mock_save.call_args[1]
                        if save_args['restaurant_name'] == 'Thai Corner':
                            print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω")
                            return True
                    
                    print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
    
    async def test_custom_time_and_date(self):
        """–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã"""
        print("\nüïê –¢–ï–°–¢: –ö–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞")
        print("=" * 60)
        
        try:
            restaurant = {'name': 'Custom Restaurant', 'cuisine': 'Any'}
            update = self.create_mock_update()
            context = self.create_mock_context([restaurant])
            
            # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            context.user_data['booking_data'] = {
                'restaurant': restaurant,
                'step': 'waiting_custom_time'
            }
            
            with patch('src.bot.handlers.booking_handlers.ai_generate', new_callable=AsyncMock) as mock_ai:
                with patch.object(BookingManager, '_ask_for_guests', new_callable=AsyncMock):
                    
                    print("1Ô∏è‚É£ –í–≤–æ–¥–∏–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ –≤—Ä–µ–º—è: '–ø–æ–ª–æ–≤–∏–Ω–∞ –≤–æ—Å—å–º–æ–≥–æ –≤–µ—á–µ—Ä–∞'")
                    update.message.text = "–ø–æ–ª–æ–≤–∏–Ω–∞ –≤–æ—Å—å–º–æ–≥–æ –≤–µ—á–µ—Ä–∞"
                    mock_ai.return_value = "19:30"
                    
                    result = await handle_custom_time_input(update, context)
                    
                    if result and context.user_data['booking_data'].get('time') == time(19, 30):
                        print("‚úÖ AI —Ä–∞—Å–ø–∞—Ä—Å–∏–ª –≤—Ä–µ–º—è: 19:30")
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏")
                        return False
            
            # –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–π –¥–∞—Ç—ã
            context.user_data['booking_data']['step'] = 'waiting_custom_date'
            
            with patch('src.bot.handlers.booking_handlers.ai_generate', new_callable=AsyncMock) as mock_ai:
                with patch.object(BookingManager, '_complete_booking', new_callable=AsyncMock):
                    
                    print("2Ô∏è‚É£ –í–≤–æ–¥–∏–º –∫–∞—Å—Ç–æ–º–Ω—É—é –¥–∞—Ç—É: '—Å–ª–µ–¥—É—é—â–∞—è –ø—è—Ç–Ω–∏—Ü–∞'")
                    next_friday = date.today() + timedelta(days=7)
                    update.message.text = "—Å–ª–µ–¥—É—é—â–∞—è –ø—è—Ç–Ω–∏—Ü–∞"
                    mock_ai.return_value = next_friday.strftime('%d.%m.%Y')
                    
                    result = await handle_custom_date_input(update, context)
                    
                    if result and context.user_data['booking_data'].get('date') == next_friday:
                        print(f"‚úÖ AI —Ä–∞—Å–ø–∞—Ä—Å–∏–ª –¥–∞—Ç—É: {next_friday}")
                        return True
                    else:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
    
    async def test_booking_preferences(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–µ–ª–∞–Ω–∏–π –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüí≠ –¢–ï–°–¢: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è")
        print("=" * 60)
        
        try:
            update = self.create_mock_update()
            context = self.create_mock_context()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            context.user_data['current_booking_number'] = 123
            update.message.text = "–°—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
            
            with patch('src.bot.database.bookings.update_booking_preferences', new_callable=AsyncMock) as mock_update:
                with patch('src.bot.handlers.booking_handlers.translate_message', new_callable=AsyncMock) as mock_translate:
                    
                    mock_update.return_value = True
                    mock_translate.return_value = "Your preferences have been saved"
                    
                    print("1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏–µ: '–°—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ'")
                    result = await handle_booking_preferences(update, context)
                    
                    if result and mock_update.called:
                        call_args = mock_update.call_args[0]
                        if call_args[0] == 123 and "—Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞" in call_args[1].lower():
                            print("‚úÖ –ü–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #123")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω
                            if context.user_data.get('current_booking_number') is None:
                                print("‚úÖ –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω")
                                return True
                            else:
                                print("‚ö†Ô∏è –ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –æ—á–∏—â–µ–Ω")
                                return False
                        else:
                            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
                            return False
                    else:
                        print("‚ùå –ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
    
    async def test_booking_from_chat(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""
        print("\nüí¨ –¢–ï–°–¢: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —á–∞—Ç–∞")
        print("=" * 60)
        
        try:
            restaurants = [
                {'name': 'Blue Elephant', 'cuisine': 'Thai'},
                {'name': 'Red Dragon', 'cuisine': 'Chinese'}
            ]
            
            update = self.create_mock_update()
            context = self.create_mock_context(restaurants)
            
            with patch('src.bot.managers.booking_manager.ai_generate', new_callable=AsyncMock) as mock_ai:
                with patch.object(BookingManager, '_ask_for_time', new_callable=AsyncMock) as mock_ask_time:
                    
                    print("1Ô∏è‚É£ –°–æ–æ–±—â–µ–Ω–∏–µ: '—Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ Blue Elephant'")
                    message_text = "—Ö–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫ –≤ Blue Elephant"
                    mock_ai.return_value = "Blue Elephant"
                    
                    await BookingManager.start_booking_from_chat(update, context, message_text)
                    
                    booking_data = context.user_data.get('booking_data', {})
                    if booking_data.get('restaurant', {}).get('name') == 'Blue Elephant':
                        print("‚úÖ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                        
                        if mock_ask_time.called:
                            print("‚úÖ –ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
                            return True
                        else:
                            print("‚ùå –ù–µ –Ω–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
                            return False
                    else:
                        print("‚ùå AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã flow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üß™ –†–£–ß–ù–û–ô FLOW –¢–ï–°–¢ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        
        tests = [
            ("single_restaurant", self.test_single_restaurant_flow),
            ("multiple_restaurants", self.test_multiple_restaurants_flow),
            ("custom_inputs", self.test_custom_time_and_date),
            ("preferences", self.test_booking_preferences),
            ("chat_booking", self.test_booking_from_chat)
        ]
        
        results = {"passed": 0, "failed": 0}
        
        for test_name, test_func in tests:
            try:
                success = await test_func()
                if success:
                    print(f"‚úÖ {test_name.replace('_', ' ').title()}: –ü–†–û–ô–î–ï–ù")
                    results["passed"] += 1
                else:
                    print(f"‚ùå {test_name.replace('_', ' ').title()}: –ü–†–û–í–ê–õ–ï–ù")
                    results["failed"] += 1
            except Exception as e:
                print(f"üí• {test_name.replace('_', ' ').title()}: –û–®–ò–ë–ö–ê - {e}")
                results["failed"] += 1
        
        print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {results['passed']}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {results['failed']}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['passed']/(results['passed']+results['failed'])*100:.1f}%")
        
        if results["passed"] == len(tests):
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ú–æ–¥—É–ª—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è {results['failed']} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = BookingFlowTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 