#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
FLOW –¢–ï–°–¢ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –° –¢–ï–°–¢–û–í–û–ô –ë–î
==================================

–ü–æ–ª–Ω—ã–π flow —Ç–µ—Å—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–¢—Ä–µ–±—É–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –ë–î (scripts/create_test_db.sh).
"""

import sys
import os
import asyncio
from datetime import date, time, datetime, timedelta
from unittest.mock import Mock, patch, AsyncMock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

class TestDBFlowTester:
    """–¢–µ—Å—Ç–µ—Ä flow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
    
    def __init__(self):
        # –ü–∞—Ç—á–∏–º connection.py —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        self.patch_connection()
        
    def patch_connection(self):
        """–ü–æ–¥–º–µ–Ω—è–µ—Ç connection.py –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é"""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        from src.bot.database.test_connection import get_db_connection as test_get_db_connection
        
        # –ü–∞—Ç—á–∏–º –≤—Å–µ –º–æ–¥—É–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ë–î
        import src.bot.database.bookings
        src.bot.database.bookings.get_db_connection = test_get_db_connection
        
        print("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –ë–î")
    
    def create_mock_update(self, user_id=12345, username="testuser", 
                          first_name="Test", last_name="User"):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç update"""
        update = Mock()
        query = Mock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback query
        update.callback_query = query
        query.answer = AsyncMock()
        query.edit_message_text = AsyncMock()
        query.message = Mock()
        query.message.reply_text = AsyncMock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update.effective_user = Mock()
        update.effective_user.id = user_id
        update.effective_user.username = username
        update.effective_user.first_name = first_name
        update.effective_user.last_name = last_name
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Ç–∞
        update.effective_chat = Mock()
        update.effective_chat.send_message = AsyncMock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.message = Mock()
        update.message.text = ""
        update.message.reply_text = AsyncMock()
        
        return update
    
    def create_mock_context(self, restaurants=None, language='en'):
        """–°–æ–∑–¥–∞–µ—Ç mock –æ–±—ä–µ–∫—Ç context"""
        context = Mock()
        
        if restaurants is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–∑ –ë–î
            restaurants = [
                {
                    'name': 'Test Italian Restaurant',
                    'cuisine': 'Italian',
                    'working_hours': {'close': '23:00'}
                }
            ]
        
        context.user_data = {
            'language': language,
            'filtered_restaurants': restaurants
        }
        
        return context
    
    async def test_real_db_booking_flow(self):
        """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
        print("\nüóÑÔ∏è –¢–ï–°–¢: –ü–æ–ª–Ω—ã–π flow —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î")
        print("=" * 60)
        
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ –ø–∞—Ç—á–∞
            from src.bot.handlers.booking_handlers import (
                book_restaurant_callback, book_time_callback,
                book_guests_callback, book_date_callback
            )
            from src.bot.database.bookings import get_restaurant_working_hours
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
            restaurant = {
                'name': 'Test Italian Restaurant',
                'cuisine': 'Italian'
            }
            
            update = self.create_mock_update()
            context = self.create_mock_context([restaurant])
            
            # –ü–∞—Ç—á–∏–º —Ç–æ–ª—å–∫–æ translate_message, –ë–î –æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é
            with patch('src.bot.managers.booking_manager.translate_message', new_callable=AsyncMock) as mock_translate:
                mock_translate.side_effect = [
                    "What time should I book the table for?",
                    "For how many guests?",
                    "Are we booking for today?",
                    "Booking confirmed!",
                    "Instructions"
                ]
                
                print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...")
                restaurant_data = await get_restaurant_working_hours('Test Italian Restaurant')
                if restaurant_data:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_data}")
                else:
                    print("‚ùå –†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î")
                    return False
                
                print("2Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
                await book_restaurant_callback(update, context)
                
                booking_data = context.user_data.get('booking_data', {})
                if booking_data.get('restaurant') == restaurant:
                    print("‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ã–±—Ä–∞–Ω")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
                    return False
                
                print("3Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è (19:30)...")
                update.callback_query.data = "book_time_19:30"
                await book_time_callback(update, context)
                
                if booking_data.get('time') == time(19, 30):
                    print("‚úÖ –í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ: 19:30")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
                    return False
                
                print("4Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Å—Ç–µ–π (2)...")
                update.callback_query.data = "book_guests_2"
                await book_guests_callback(update, context)
                
                if booking_data.get('guests') == 2:
                    print("‚úÖ –ì–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω—ã: 2")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Å—Ç–µ–π")
                    return False
                
                print("5Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)...")
                update.callback_query.data = "book_date_today"
                await book_date_callback(update, context)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
                if context.user_data.get('current_booking_number'):
                    booking_number = context.user_data['current_booking_number']
                    print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î —Å –Ω–æ–º–µ—Ä–æ–º: {booking_number}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ë–î
                    from src.bot.database.bookings import get_booking_by_number
                    saved_booking = await get_booking_by_number(booking_number)
                    
                    if saved_booking:
                        print(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î:")
                        print(f"   - –†–µ—Å—Ç–æ—Ä–∞–Ω: {saved_booking['restaurant']}")
                        print(f"   - –í—Ä–µ–º—è: {saved_booking['time']}")
                        print(f"   - –ì–æ—Å—Ç–∏: {saved_booking['guests']}")
                        print(f"   - –°—Ç–∞—Ç—É—Å: {saved_booking['status']}")
                        return True
                    else:
                        print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î")
                        return False
                else:
                    print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def test_booking_preferences_with_db(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–∂–µ–ª–∞–Ω–∏–π —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î"""
        print("\nüí≠ –¢–ï–°–¢: –ü–æ–∂–µ–ª–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î")
        print("=" * 60)
        
        try:
            from src.bot.handlers.booking_handlers import handle_booking_preferences
            from src.bot.database.bookings import get_booking_by_number
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            existing_booking_number = 1  # –ü–µ—Ä–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
            update = self.create_mock_update()
            context = self.create_mock_context()
            
            context.user_data['current_booking_number'] = existing_booking_number
            update.message.text = "–°—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞ —Å –≤–∏–¥–æ–º –Ω–∞ –º–æ—Ä–µ"
            
            with patch('src.bot.handlers.booking_handlers.translate_message', new_callable=AsyncMock) as mock_translate:
                mock_translate.return_value = "Preferences saved"
                
                print(f"1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é #{existing_booking_number}...")
                result = await handle_booking_preferences(update, context)
                
                if result:
                    print("‚úÖ –ü–æ–∂–µ–ª–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î
                    updated_booking = await get_booking_by_number(existing_booking_number)
                    if updated_booking and "—Å—Ç–æ–ª–∏–∫ —É –æ–∫–Ω–∞" in updated_booking['preferences'].lower():
                        print("‚úÖ –ü–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                        return True
                    else:
                        print("‚ùå –ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –ë–î")
                        return False
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–π")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    async def check_test_db_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
        print("\nüìä –ü–†–û–í–ï–†–ö–ê –¢–ï–°–¢–û–í–û–ô –ë–î")
        print("=" * 40)
        
        try:
            from src.bot.database.test_connection import get_db_connection
            from psycopg2.extras import DictCursor
            
            conn = get_db_connection()
            cur = conn.cursor(cursor_factory=DictCursor)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cur.execute("SELECT COUNT(*) FROM users")
            users_count = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM restaurants")
            restaurants_count = cur.fetchone()[0]
            
            cur.execute("SELECT COUNT(*) FROM bookings")
            bookings_count = cur.fetchone()[0]
            
            cur.close()
            conn.close()
            
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞:")
            print(f"   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
            print(f"   - –†–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {restaurants_count}")
            print(f"   - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {bookings_count}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î: {e}")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –ë–î: scripts/create_test_db.sh")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
        print("üß™ FLOW –¢–ï–°–¢ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø –° –¢–ï–°–¢–û–í–û–ô –ë–î")
        print("=" * 80)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
        if not await self.check_test_db_status():
            return
        
        tests = [
            ("real_db_flow", self.test_real_db_booking_flow),
            ("preferences_with_db", self.test_booking_preferences_with_db)
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            try:
                success = await test_func()
                if success:
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    passed += 1
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                    failed += 1
            except Exception as e:
                print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
                failed += 1
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
        
        if passed == len(tests):
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –ë–î.")
        else:
            print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = TestDBFlowTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 