#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ê–ù–ê–õ–ò–ó –ú–´–®–õ–ï–ù–ò–Ø AI –í –î–ò–ê–õ–û–ì–ê–•
=============================

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è AI –±–æ—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥–∞—Ö.
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –∏ –ø–æ–Ω–∏–º–∞—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- –ò–∑—É—á–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π AI
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —á–µ–ª–æ–≤–µ—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è  
- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–∏–∞–ª–æ–≥–æ–≤
- –ê–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞

–ó–ê–ü–£–°–ö: python tests/manual/dialogue_studies/ai_thinking_analysis.py
"""

import sys
import os
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..')))

from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai_model = os.getenv('OPENAI_MODEL', 'gpt-4o')
client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

async def analyze_dialogue_decision(conversation_history, budget="$$"):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ: –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –∏—Å–∫–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã
    –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ main.py —Ñ—É–Ω–∫—Ü–∏–∏ talk()
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - –í–ï–°–¨ –¥–∏–∞–ª–æ–≥, –≤–∫–ª—é—á–∞—è –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
        conversation_context = []
        for msg in conversation_history:
            if msg['role'] == 'user':
                conversation_context.append(f"–ö–ª–∏–µ–Ω—Ç: {msg['content']}")
            elif msg['role'] == 'assistant':
                conversation_context.append(f"–ë–æ—Ç: {msg['content']}")
        
        full_context = '\n'.join(conversation_context)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–∞
        decision_prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º –ü—Ö—É–∫–µ—Ç–∞. –í–µ–¥–µ—à—å –∂–∏–≤—É—é –±–µ—Å–µ–¥—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º.

–ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê:
{full_context}

–ë—é–¥–∂–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {budget}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –∏ —Ä–µ—à–∏ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤?

–ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø –ü–û–ò–°–ö–ê:
‚úÖ –ï—Å—Ç—å —Ç–∏–ø –∫—É—Ö–Ω–∏/–µ–¥—ã + –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, –ø–æ–≤–æ–¥, –∫–æ–º–ø–∞–Ω–∏—è)
‚úÖ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è + –¥–µ—Ç–∞–ª–∏
‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π

–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É - –æ—Ç–≤–µ—Ç—å "–ü–û–ò–°–ö"
–ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–¥–∞–π —É–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        last_user_message = ""
        for msg in reversed(conversation_history):
            if msg['role'] == 'user':
                last_user_message = msg['content']
                break
        
        messages = [
            {"role": "system", "content": decision_prompt},
            {"role": "user", "content": last_user_message}
        ]
        
        response = client.chat.completions.create(
            model=openai_model,
            messages=messages,
            temperature=0.7,
            max_tokens=150
        )
        
        ai_response = response.choices[0].message.content.strip()
        should_search = "–ü–û–ò–°–ö" in ai_response
        
        return {
            "should_search": should_search,
            "ai_response": ai_response,
            "conversation_context": full_context
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞–Ω–∞–ª–∏–∑–µ AI: {e}")
        return {
            "should_search": False,
            "ai_response": "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö",
            "conversation_context": full_context if 'full_context' in locals() else ""
        }

async def test_dialogue_scenario(scenario):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–∏–∞–ª–æ–≥–∞"""
    print(f"\nüé≠ –°–¶–ï–ù–ê–†–ò–ô: {scenario['name']}")
    print("=" * 60)
    
    conversation_history = []
    
    for i, turn in enumerate(scenario['turns'], 1):
        print(f"\n–®–∞–≥ {i}:")
        
        if turn['type'] == 'user':
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conversation_history.append({"role": "user", "content": turn['message']})
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn['message']}")
            
            # AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ
            analysis = await analyze_dialogue_decision(conversation_history, scenario.get('budget', '$$'))
            
            if analysis['should_search']:
                print(f"ü§ñ –†–µ—à–µ–Ω–∏–µ: –ü–û–ò–°–ö –†–ï–°–¢–û–†–ê–ù–û–í")
                print(f"üí≠ –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {analysis['ai_response']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏—è
                expected = turn.get('expected_decision', 'continue')
                if expected == 'search':
                    print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û - –ø–æ—Ä–∞ –∏—Å–∫–∞—Ç—å!")
                    return "success"
                else:
                    print("‚ùå –°–õ–ò–®–ö–û–ú –†–ê–ù–û - –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
                    return "too_early"
            else:
                print(f"ü§ñ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞: {analysis['ai_response']}")
                conversation_history.append({"role": "assistant", "content": analysis['ai_response']})
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∑–¥–Ω–æ –ª–∏
                expected = turn.get('expected_decision', 'continue')
                if expected == 'search':
                    print("‚ùå –°–õ–ò–®–ö–û–ú –ü–û–ó–î–ù–û - –¥–æ–ª–∂–µ–Ω –±—ã–ª —É–∂–µ –∏—Å–∫–∞—Ç—å!")
                    return "too_late"
        
        elif turn['type'] == 'bot':
            # –ó–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            conversation_history.append({"role": "assistant", "content": turn['message']})
            print(f"ü§ñ –ë–æ—Ç: {turn['message']}")
    
    return "incomplete"

# –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
TEST_SCENARIOS = [
    {
        "name": "–ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Å—É—à–∏",
        "budget": "$$", 
        "turns": [
            {"type": "user", "message": "–∏—â—É —Å—É—à–∏-–±–∞—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è –¥–≤–æ–∏—Ö", "expected_decision": "search"}
        ]
    },
    {
        "name": "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ - –ø–æ—à–∞–≥–æ–≤–æ–µ –≤—ã—è—Å–Ω–µ–Ω–∏–µ",
        "budget": "$$$",
        "turns": [
            {"type": "user", "message": "—Ö–æ—á—É –Ω–∞ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ", "expected_decision": "continue"},
            {"type": "user", "message": "–∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é –∫—É—Ö–Ω—é, –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ—Å—Ç–æ", "expected_decision": "search"}
        ]
    },
    {
        "name": "–°–µ–º–µ–π–Ω—ã–π –æ–±–µ–¥ - –Ω—É–∂–Ω—ã –¥–µ—Ç–∞–ª–∏",
        "budget": "$$",
        "turns": [
            {"type": "user", "message": "—Å —Å–µ–º—å–µ–π –∏ –¥–µ—Ç—å–º–∏ –ø–æ–µ—Å—Ç—å", "expected_decision": "continue"},
            {"type": "user", "message": "—á—Ç–æ-—Ç–æ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ, –Ω–µ –æ—Å—Ç—Ä–æ–µ", "expected_decision": "search"}
        ]
    },
    {
        "name": "–ù–µ–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å - —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–π",
        "budget": "$$",
        "turns": [
            {"type": "user", "message": "—Ö–æ—á—É –ø–æ–µ—Å—Ç—å", "expected_decision": "continue"},
            {"type": "user", "message": "—á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ", "expected_decision": "continue"},
            {"type": "user", "message": "–º—è—Å–Ω–æ–µ, –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥—Ä—É–∑–µ–π", "expected_decision": "search"}
        ]
    }
]

async def run_dialogue_analysis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    print("üß† –ê–ù–ê–õ–ò–ó –ú–´–®–õ–ï–ù–ò–Ø AI –í –î–ò–ê–õ–û–ì–ê–•")
    print("=" * 80)
    
    results = {"success": 0, "too_early": 0, "too_late": 0, "incomplete": 0}
    
    for scenario in TEST_SCENARIOS:
        result = await test_dialogue_scenario(scenario)
        results[result] += 1
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.upper()}")
        print("-" * 40)
    
    print(f"\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {results['success']}")
    print(f"‚ö° –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ: {results['too_early']}")  
    print(f"üêå –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ: {results['too_late']}")
    print(f"‚ùì –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–æ: {results['incomplete']}")
    
    total = sum(results.values())
    success_rate = (results['success'] / total * 100) if total > 0 else 0
    print(f"\nüéØ –¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π: {success_rate:.1f}%")

if __name__ == "__main__":
    asyncio.run(run_dialogue_analysis()) 