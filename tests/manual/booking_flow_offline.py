#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OFFLINE FLOW –¢–ï–°–¢ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø
=============================

–ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç–µ—Å—Ç flow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–æ–¥—É–ª—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤.
"""

import asyncio
from datetime import date, time
from unittest.mock import Mock, AsyncMock

class MockBookingManager:
    """Mock –≤–µ—Ä—Å–∏—è BookingManager –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    async def start_booking_from_button(update, context):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        restaurants = context.user_data.get('filtered_restaurants', [])
        
        if not restaurants:
            await update.callback_query.edit_message_text("No restaurants found")
            return
        
        context.user_data['booking_data'] = {
            'user_id': update.effective_user.id,
            'restaurants': restaurants,
            'step': 'restaurant_selection'
        }
        
        if len(restaurants) == 1:
            # –û–¥–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω - –∞–≤—Ç–æ–≤—ã–±–æ—Ä
            context.user_data['booking_data']['restaurant'] = restaurants[0]
            context.user_data['booking_data']['step'] = 'time_selection'
            await update.callback_query.edit_message_text("What time should I book?")
        else:
            # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä
            context.user_data['booking_data']['step'] = 'restaurant_selection'
            await update.callback_query.edit_message_text("Which restaurant?")

class MockHandlers:
    """Mock –≤–µ—Ä—Å–∏–∏ handlers –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    async def book_restaurant_callback(update, context):
        await MockBookingManager.start_booking_from_button(update, context)
    
    @staticmethod
    async def book_restaurant_select_callback(update, context):
        """–í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
        index = int(update.callback_query.data.split('_')[-1])
        restaurants = context.user_data['booking_data']['restaurants']
        
        if 0 <= index < len(restaurants):
            context.user_data['booking_data']['restaurant'] = restaurants[index]
            context.user_data['booking_data']['step'] = 'time_selection'
            await update.callback_query.edit_message_text("What time?")
    
    @staticmethod
    async def book_time_callback(update, context):
        """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏"""
        if update.callback_query.data == "book_time_custom":
            context.user_data['booking_data']['step'] = 'waiting_custom_time'
            await update.callback_query.edit_message_text("Enter custom time")
        else:
            time_str = update.callback_query.data.split('_')[-1]
            hour, minute = map(int, time_str.split(':'))
            context.user_data['booking_data']['time'] = time(hour, minute)
            context.user_data['booking_data']['step'] = 'guests_selection'
            await update.callback_query.edit_message_text("How many guests?")
    
    @staticmethod
    async def book_guests_callback(update, context):
        """–í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π"""
        guests = int(update.callback_query.data.split('_')[-1])
        context.user_data['booking_data']['guests'] = guests
        context.user_data['booking_data']['step'] = 'date_selection'
        await update.callback_query.edit_message_text("Which date?")
    
    @staticmethod
    async def book_date_callback(update, context):
        """–í—ã–±–æ—Ä –¥–∞—Ç—ã"""
        if update.callback_query.data == "book_date_today":
            context.user_data['booking_data']['date'] = date.today()
        elif update.callback_query.data == "book_date_tomorrow":
            from datetime import timedelta
            context.user_data['booking_data']['date'] = date.today() + timedelta(days=1)
        elif update.callback_query.data == "book_date_custom":
            context.user_data['booking_data']['step'] = 'waiting_custom_date'
            await update.callback_query.edit_message_text("Enter custom date")
            return
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await MockHandlers._complete_booking(update, context)
    
    @staticmethod
    async def _complete_booking(update, context):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        booking_data = context.user_data['booking_data']
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        booking_number = 100
        context.user_data['current_booking_number'] = booking_number
        
        await update.effective_chat.send_message("Booking confirmed!")
        await update.effective_chat.send_message("Instructions")

class FlowTester:
    """–¢–µ—Å—Ç–µ—Ä flow –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def create_mock_update(self, user_id=12345):
        """–°–æ–∑–¥–∞–µ—Ç mock update"""
        update = Mock()
        query = Mock()
        
        update.callback_query = query
        query.answer = AsyncMock()
        query.edit_message_text = AsyncMock()
        query.data = ""
        
        update.effective_user = Mock()
        update.effective_user.id = user_id
        update.effective_user.first_name = "Test"
        update.effective_user.last_name = "User"
        
        update.effective_chat = Mock()
        update.effective_chat.send_message = AsyncMock()
        
        return update
    
    def create_mock_context(self, restaurants=None):
        """–°–æ–∑–¥–∞–µ—Ç mock context"""
        context = Mock()
        
        if restaurants is None:
            restaurants = [{'name': 'Test Restaurant', 'cuisine': 'Italian'}]
        
        context.user_data = {
            'language': 'en',
            'filtered_restaurants': restaurants
        }
        
        return context
    
    async def test_single_restaurant_flow(self):
        """–¢–µ—Å—Ç —Å –æ–¥–Ω–∏–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º"""
        print("\nüçù –¢–ï–°–¢: –û–¥–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
        print("=" * 40)
        
        restaurant = {'name': 'Solo Restaurant', 'cuisine': 'Italian'}
        update = self.create_mock_update()
        context = self.create_mock_context([restaurant])
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print("1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        await MockHandlers.book_restaurant_callback(update, context)
        
        booking_data = context.user_data.get('booking_data', {})
        if booking_data.get('restaurant') == restaurant:
            print("‚úÖ –†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
            return False
        
        # –®–∞–≥ 2: –í—Ä–µ–º—è
        print("2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è (19:30)...")
        update.callback_query.data = "book_time_19:30"
        await MockHandlers.book_time_callback(update, context)
        
        if booking_data.get('time') == time(19, 30):
            print("‚úÖ –í—Ä–µ–º—è 19:30 –≤—ã–±—Ä–∞–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏")
            return False
        
        # –®–∞–≥ 3: –ì–æ—Å—Ç–∏
        print("3Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≥–æ—Å—Ç–µ–π (2)...")
        update.callback_query.data = "book_guests_2"
        await MockHandlers.book_guests_callback(update, context)
        
        if booking_data.get('guests') == 2:
            print("‚úÖ 2 –≥–æ—Å—Ç—è –≤—ã–±—Ä–∞–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Å—Ç–µ–π")
            return False
        
        # –®–∞–≥ 4: –î–∞—Ç–∞
        print("4Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)...")
        update.callback_query.data = "book_date_today"
        await MockHandlers.book_date_callback(update, context)
        
        if context.user_data.get('current_booking_number') == 100:
            print("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –Ω–æ–º–µ—Ä–æ–º 100")
            return True
        else:
            print("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return False
    
    async def test_multiple_restaurants_flow(self):
        """–¢–µ—Å—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏"""
        print("\nüçï –¢–ï–°–¢: –ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        print("=" * 40)
        
        restaurants = [
            {'name': 'Italian Place', 'cuisine': 'Italian'},
            {'name': 'Thai Corner', 'cuisine': 'Thai'}
        ]
        
        update = self.create_mock_update()
        context = self.create_mock_context(restaurants)
        
        # –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        print("1Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        await MockHandlers.book_restaurant_callback(update, context)
        
        booking_data = context.user_data.get('booking_data', {})
        if booking_data.get('step') == 'restaurant_selection':
            print("‚úÖ –ü–æ–∫–∞–∑–∞–Ω –≤—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–±–æ—Ä–∞")
            return False
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
        print("2Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω...")
        update.callback_query.data = "book_restaurant_1"
        await MockHandlers.book_restaurant_select_callback(update, context)
        
        if booking_data.get('restaurant') == restaurants[1]:
            print("‚úÖ Thai Corner –≤—ã–±—Ä–∞–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞")
            return False
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
        print("3Ô∏è‚É£ –í—Ä–µ–º—è 20:00...")
        update.callback_query.data = "book_time_20:00"
        await MockHandlers.book_time_callback(update, context)
        
        print("4Ô∏è‚É£ –ì–æ—Å—Ç–∏ 4...")
        update.callback_query.data = "book_guests_4"
        await MockHandlers.book_guests_callback(update, context)
        
        print("5Ô∏è‚É£ –î–∞—Ç–∞ –∑–∞–≤—Ç—Ä–∞...")
        update.callback_query.data = "book_date_tomorrow"
        await MockHandlers.book_date_callback(update, context)
        
        if context.user_data.get('current_booking_number') == 100:
            print("‚úÖ –ü–æ–ª–Ω—ã–π flow –∑–∞–≤–µ—Ä—à–µ–Ω")
            return True
        else:
            print("‚ùå Flow –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω")
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ OFFLINE FLOW –¢–ï–°–¢ –ë–†–û–ù–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        tests = [
            ("single_restaurant", self.test_single_restaurant_flow),
            ("multiple_restaurants", self.test_multiple_restaurants_flow)
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_func in tests:
            try:
                success = await test_func()
                if success:
                    print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                    passed += 1
                else:
                    print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                    failed += 1
            except Exception as e:
                print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
                failed += 1
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
        
        if passed == len(tests):
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! Flow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = FlowTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 