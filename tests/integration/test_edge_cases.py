#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTEGRATION –¢–ï–°–¢–´ - EDGE CASES –ò –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò
===============================================

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ edge cases –∏–∑ tests/to_do.txt:
1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
2. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–∞–π–ª—ã)
5. –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–∑–æ–ª—è—Ü–∏—è
6. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ
7. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
8. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
9. –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
10. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
11. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
12. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π
"""

import sys
import os
import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
from src.bot.database.users import save_user_to_db, save_user_preferences
from src.bot.ai.core import ai_generate, is_about_restaurants
from src.bot.ai.translation import detect_language, translate_message

class TestErrorHandlingAndExceptions:
    """–¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π (–ø—É–Ω–∫—Ç 1 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_database_connection_errors(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        with patch('src.bot.database.users.get_db_connection', 
                   side_effect=Exception("Database connection failed")):
            
            result = save_user_to_db(123, "test", "Test", "User", "ru")
            assert result is False  # –î–æ–ª–∂–µ–Ω gracefully –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É
    
    @pytest.mark.asyncio
    async def test_ai_service_errors(self):
        """–¢–µ—Å—Ç –æ—à–∏–±–æ–∫ AI —Å–µ—Ä–≤–∏—Å–∞"""
        
        with patch('src.bot.ai.core.client') as mock_client:
            mock_client.chat.completions.create.side_effect = Exception("OpenAI API Error")
            
            # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = await ai_generate('restaurant_recommendation', 
                                     text="test", target_language='ru')
            assert "–ò–∑–≤–∏–Ω–∏—Ç–µ" in result or "–æ—à–∏–±–∫–∞" in result.lower()

class TestInvalidInputData:
    """–¢–µ—Å—Ç—ã –Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø—É–Ω–∫—Ç 2 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_empty_and_invalid_text(self):
        """–¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö –∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
        
        test_cases = ["", " ", None, "\n", "\t", "ü§ñ", "123456789"]
        
        for test_text in test_cases:
            try:
                # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
                lang = await detect_language(test_text)
                assert isinstance(lang, str)
                
                # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                is_restaurant = await is_about_restaurants(test_text)
                assert isinstance(is_restaurant, bool)
                
            except Exception as e:
                # –§—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã gracefully –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥—ã
                pytest.fail(f"Should handle invalid input '{test_text}': {e}")
    
    @pytest.mark.asyncio
    async def test_invalid_user_data(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ ID
        invalid_ids = [-1, 0, "string", None, 999999999999]
        
        for invalid_id in invalid_ids:
            try:
                result = save_user_to_db(invalid_id, "test", "Test", "User", "ru")
                # –î–æ–ª–∂–µ–Ω –ª–∏–±–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ª–∏–±–æ –≤–µ—Ä–Ω—É—Ç—å False
                assert isinstance(result, bool)
            except Exception:
                # –ò—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–∂–µ –¥–æ–ø—É—Å—Ç–∏–º—ã –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                pass

class TestAlternativeScenarios:
    """–¢–µ—Å—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ (–ø—É–Ω–∫—Ç 3 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_language_detection_edge_cases(self):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö"""
        
        edge_cases = [
            ("Hello –º–∏—Ä", "mixed languages"),
            ("123 456 789", "numbers only"),
            ("!@#$%^&*()", "special chars only"),
            ("–ü—Ä–∏–≤–µ—Ç! How are you?", "mixed with punctuation"),
            ("üçïüçîüçü", "emojis only")
        ]
        
        for text, description in edge_cases:
            try:
                lang = await detect_language(text)
                assert isinstance(lang, str)
                assert len(lang) >= 2  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ —è–∑—ã–∫–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            except Exception as e:
                pytest.fail(f"Language detection failed for {description}: {e}")
    
    @pytest.mark.asyncio
    async def test_translation_edge_cases(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö"""
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
        result = await translate_message('nonexistent_key', 'ru')
        assert result == 'nonexistent_key'  # –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–ª—é—á
        
        # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫
        result = await translate_message('welcome', 'xyz')
        assert isinstance(result, str)

class TestMultiUserIsolation:
    """–¢–µ—Å—Ç –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–∑–æ–ª—è—Ü–∏–∏ (–ø—É–Ω–∫—Ç 5 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_concurrent_user_operations(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            tasks = []
            for i in range(5):
                user_id = 777770 + i
                task = save_user_to_db(user_id, f"user{i}", "Test", f"User{i}", "ru")
                tasks.append(task)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –±–µ–∑ –≤–∑–∞–∏–º–Ω–æ–≥–æ –≤–ª–∏—è–Ω–∏—è
            for result in results:
                if isinstance(result, Exception):
                    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
                    continue
                assert isinstance(result, bool)
                
        except Exception as e:
            pytest.skip(f"Concurrent operations test skipped: {e}")

class TestPerformanceUnderLoad:
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ (–ø—É–Ω–∫—Ç 6 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_ai_response_time(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ AI —Ñ—É–Ω–∫—Ü–∏–π"""
        import time
        
        start_time = time.time()
        
        # –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö fallback –æ–ø–µ—Ä–∞—Ü–∏–π
        result = await ai_generate('fallback_error', target_language='ru')
        
        elapsed = time.time() - start_time
        
        # Fallback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º
        assert elapsed < 0.1
        assert len(result) > 0

class TestSecurityAndValidation:
    """–¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–ø—É–Ω–∫—Ç 7 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_sql_injection_protection(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        
        malicious_inputs = [
            "'; DROP TABLE users; --",
            "1' OR '1'='1",
            "admin'; DELETE FROM users WHERE '1'='1",
            "<script>alert('xss')</script>",
            "../../etc/passwd"
        ]
        
        for malicious_input in malicious_inputs:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                result = save_user_to_db(888888, malicious_input, 
                                       malicious_input, malicious_input, "ru")
                
                # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ª–∏–±–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ, –ª–∏–±–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
                assert isinstance(result, bool)
                
            except Exception:
                # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ø—É—Å—Ç–∏–º—ã
                pass

class TestLocalizationAndTranslations:
    """–¢–µ—Å—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (–ø—É–Ω–∫—Ç 9 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_language_support(self):
        """–¢–µ—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤"""
        
        languages = ['ru', 'en', 'th', 'de', 'fr', 'es', 'zh']
        
        for lang in languages:
            try:
                # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                result = await translate_message('welcome', lang)
                assert isinstance(result, str)
                assert len(result) > 0
                
            except Exception as e:
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —è–∑—ã–∫–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
                continue

class TestLoggingAndMonitoring:
    """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø—É–Ω–∫—Ç 10 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_error_logging(self):
        """–¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
        
        with patch('src.bot.ai.core.logger') as mock_logger:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É
            with patch('src.bot.ai.core.client') as mock_client:
                mock_client.chat.completions.create.side_effect = Exception("Test Error")
                
                await ai_generate('restaurant_recommendation', 
                                text="test", target_language='ru')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞
                mock_logger.error.assert_called()

class TestRecoveryAfterFailures:
    """–¢–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±–æ–µ–≤ (–ø—É–Ω–∫—Ç 11 –∏–∑ TO-DO)"""
    
    @pytest.mark.asyncio
    async def test_graceful_degradation(self):
        """–¢–µ—Å—Ç graceful degradation –ø—Ä–∏ —Å–±–æ—è—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        # –¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI
        with patch('src.bot.ai.core.client') as mock_client:
            mock_client.chat.completions.create.side_effect = Exception("Service Unavailable")
            
            # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å fallback
            result = await ai_generate('fallback_error', target_language='ru')
            assert "–ò–∑–≤–∏–Ω–∏—Ç–µ" in result
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å —Å fallback
            is_restaurant = await is_about_restaurants("—Ç–µ—Å—Ç")
            assert isinstance(is_restaurant, bool)

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 