#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
INTEGRATION –¢–ï–°–¢–´ - EDGE CASES –ò –ì–†–ê–ù–ò–ß–ù–´–ï –°–õ–£–ß–ê–ò
===============================================

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï –¢–ï–°–¢–´ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª–æ–º–æ–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ:
1. ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
2. ‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ  
3. ‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. ‚úÖ –ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–∞–π–ª—ã)
5. ‚úÖ –ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∏–∑–æ–ª—è—Ü–∏—è
6. ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ
7. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
8. ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
9. ‚úÖ –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
10. ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
11. ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ–µ–≤
12. ‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–µ—Ä—Å–∏–π

–ë–ï–ó –≠–¢–ò–• –¢–ï–°–¢–û–í –º—ã –º–æ–∂–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–≥–∏!
"""

import sys
import os
import pytest
import asyncio
from unittest.mock import AsyncMock, MagicMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
from src.bot.database.users import save_user_to_db, save_user_preferences
from src.bot.ai.core import ai_generate, is_about_restaurants
from src.bot.ai.translation import detect_language, translate_message

class MockUpdate:
    """–ú–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù"""
    def __init__(self, user_id=123, chat_id=123, message_text="", callback_data="", 
                 location=None, document=None, photo=None, sticker=None):
        self.effective_user = MagicMock()
        self.effective_user.id = user_id
        self.effective_user.username = "testuser"
        self.effective_user.first_name = "Test"
        self.effective_user.last_name = "User"
        
        self.effective_chat = MagicMock()
        self.effective_chat.id = chat_id
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        if message_text is not None or location or document or photo or sticker:
            self.message = MagicMock()
            self.message.text = message_text
            self.message.location = location
            self.message.document = document
            self.message.photo = photo
            self.message.sticker = sticker
            self.callback_query = None
        
        # Callback query
        if callback_data:
            self.callback_query = MagicMock()
            self.callback_query.data = callback_data
            self.callback_query.answer = AsyncMock()
            self.callback_query.message = MagicMock()
            self.callback_query.message.edit_text = AsyncMock()
            if not hasattr(self, 'message'):
                self.message = None

class TestCriticalErrorHandling:
    """–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ï —Ç–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @pytest.mark.asyncio
    async def test_database_failure_scenarios(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—Ç–∫–∞–∑–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù"""
        
        failure_scenarios = [
            "Connection refused",
            "Database is locked", 
            "Table doesn't exist",
            "Permission denied",
            "Disk full"
        ]
        
        for error_msg in failure_scenarios:
            with patch('src.bot.database.users.get_db_connection', 
                       side_effect=Exception(error_msg)):
                
                # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ gracefully –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª—é–±—ã–µ DB –æ—à–∏–±–∫–∏
                result = save_user_to_db(123, "test", "Test", "User", "ru")
                assert result is False  # –ù–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å, –∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å False
    
    @pytest.mark.asyncio
    async def test_ai_service_failure_scenarios(self):
        """–¢–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—Ç–∫–∞–∑–∞ AI —Å–µ—Ä–≤–∏—Å–∞ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù"""
        
        ai_failures = [
            "Rate limit exceeded",
            "Invalid API key", 
            "Service unavailable",
            "Timeout error",
            "Model overloaded"
        ]
        
        for error_msg in ai_failures:
            with patch('src.bot.ai.core.client') as mock_client:
                mock_client.chat.completions.create.side_effect = Exception(error_msg)
                
                # AI –¥–æ–ª–∂–µ–Ω –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å fallback, –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞—Ç—å
                result = await ai_generate('restaurant_recommendation', 
                                         text="test", target_language='ru')
                
                assert "–ò–∑–≤–∏–Ω–∏—Ç–µ" in result or "–æ—à–∏–±–∫–∞" in result.lower()
                assert len(result) > 0  # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
    
    @pytest.mark.asyncio
    async def test_network_timeout_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤ - –í–ê–ñ–ï–ù –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
        
        import time
        
        def slow_function(*args, **kwargs):
            time.sleep(0.01)  # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            raise Exception("Timeout")
        
        with patch('src.bot.ai.core.client') as mock_client:
            mock_client.chat.completions.create.side_effect = slow_function
            
            start_time = time.time()
            result = await ai_generate('fallback_error', target_language='ru')
            elapsed = time.time() - start_time
            
            # Fallback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º –¥–∞–∂–µ –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–∞—Ö
            assert elapsed < 1.0
            assert isinstance(result, str)

class TestProductionBreakingInputs:
    """–¢–µ—Å—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω"""
    
    @pytest.mark.asyncio
    async def test_malicious_inputs(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        
        malicious_inputs = [
            # SQL –∏–Ω—ä–µ–∫—Ü–∏–∏
            "'; DROP TABLE users; --",
            "1' OR '1'='1",
            "admin'; DELETE FROM users WHERE '1'='1",
            
            # XSS –∞—Ç–∞–∫–∏
            "<script>alert('xss')</script>",
            "javascript:alert('xss')",
            "<img src=x onerror=alert('xss')>",
            
            # Path traversal
            "../../etc/passwd",
            "..\\..\\windows\\system32",
            
            # Command injection
            "; rm -rf /",
            "| cat /etc/passwd",
            
            # Buffer overflow attempts
            "A" * 10000,
            "\x00" * 1000,
            
            # Unicode exploits
            "\u202e\u0041\u202d",
            "\ufeff" * 100
        ]
        
        for malicious_input in malicious_inputs:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
                result1 = save_user_to_db(888888, malicious_input, 
                                        malicious_input, malicious_input, "ru")
                assert isinstance(result1, bool)
                
                result2 = await ai_generate('fallback_error', 
                                          text=malicious_input, target_language='ru')
                assert isinstance(result2, str)
                assert "DROP" not in result2.upper()  # –ù–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å SQL –∫–æ–º–∞–Ω–¥—ã
                
                result3 = await is_about_restaurants(malicious_input)
                assert isinstance(result3, bool)
                
            except Exception as e:
                # –î–æ–ª–∂–Ω—ã gracefully –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥
                error_str = str(e).upper()
                assert "DROP" not in error_str
                assert "DELETE" not in error_str
                assert "SCRIPT" not in error_str
    
    @pytest.mark.asyncio
    async def test_extreme_data_sizes(self):
        """–¢–µ—Å—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö - –í–ê–ñ–ï–ù –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
        
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        very_long_text = "test " * 10000  # 50KB —Ç–µ–∫—Å—Ç–∞
        
        try:
            # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ gracefully
            result = await ai_generate('fallback_error', 
                                     text=very_long_text, target_language='ru')
            assert isinstance(result, str)
            assert len(result) < 1000  # Fallback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º
            
        except Exception as e:
            # –ò–ª–∏ gracefully –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ
            assert "too large" in str(e).lower() or "timeout" in str(e).lower()
    
    @pytest.mark.asyncio
    async def test_unicode_edge_cases(self):
        """–¢–µ—Å—Ç Unicode edge cases - –í–ê–ñ–ï–ù –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏"""
        
        unicode_cases = [
            "üçïüçîüçüüçóü•êü•ñüßÄü•ì",  # Emojis
            "ŸÖÿ∑ÿπŸÖ ÿ±ÿßÿ¶ÿπ ŸÑŸÑÿ∑ÿπÿßŸÖ ÿßŸÑÿπÿ±ÿ®Ÿä",  # Arabic
            "È§êÂéÖÂæàÂ•ΩÂêÉ‰∏≠ÊñáËèú",  # Chinese
            "‡§∞‡•á‡§∏‡•ç‡§ü‡•ã‡§∞‡•á‡§Ç‡§ü ‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§π‡•à",  # Hindi
            "„É¨„Çπ„Éà„É©„É≥„ÅØ„Å®„Å¶„ÇÇÁæéÂë≥„Åó„ÅÑ„Åß„Åô",  # Japanese
            "üáπüá≠ ‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏ó‡∏¢ üáπüá≠",  # Thai with flags
            "\u200b\u200c\u200d",  # Zero-width characters
            "AÃ∏Ã∞ÃéLÃ¥Ã¢ÃàÃÅGÃµÃ£Ãà√ñÃ¥ÃÅRÃ∂ÃùÃÑIÃµÃ´ÃøTÃ∑Ã∞ÃöHÃ¥Ã±ÃÑMÃµÃ≠Ãà",  # Zalgo text
        ]
        
        for unicode_text in unicode_cases:
            try:
                # –î–æ–ª–∂–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ª—é–±–æ–π Unicode
                lang = await detect_language(unicode_text)
                assert isinstance(lang, str)
                
                is_restaurant = await is_about_restaurants(unicode_text)
                assert isinstance(is_restaurant, bool)
                
            except Exception as e:
                # Unicode –æ—à–∏–±–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã, –Ω–æ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏
                assert "encode" not in str(e).lower() or "decode" not in str(e).lower()

class TestNonStandardMessages:
    """–¢–µ—Å—Ç –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ï–ù –¥–ª—è UX"""
    
    def test_photo_message_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        mock_photo = [MagicMock()]  # Telegram –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑–º–µ—Ä–æ–≤
        mock_photo[0].file_id = "photo_123"
        mock_photo[0].file_size = 1024000
        
        update = MockUpdate(user_id=123, message_text="", photo=mock_photo)
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å message –æ–±—ä–µ–∫—Ç
        assert hasattr(update, 'message')
        assert update.message is not None
        assert update.message.photo == mock_photo
    
    def test_location_message_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
        
        mock_location = MagicMock()
        mock_location.latitude = 7.8804  # Phuket coordinates
        mock_location.longitude = 98.3923
        
        update = MockUpdate(user_id=123, message_text="", location=mock_location)
        
        # –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        assert hasattr(update, 'message')
        assert update.message is not None
        assert update.message.location == mock_location
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–ª—è Phuket
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        assert 7.0 < lat < 9.0  # –®–∏—Ä–æ—Ç–∞ –ü—Ö—É–∫–µ—Ç–∞
        assert 98.0 < lon < 99.0  # –î–æ–ª–≥–æ—Ç–∞ –ü—Ö—É–∫–µ—Ç–∞
    
    def test_document_message_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        
        mock_document = MagicMock()
        mock_document.file_name = "menu.pdf"
        mock_document.file_size = 2048000
        mock_document.mime_type = "application/pdf"
        
        update = MockUpdate(user_id=123, message_text="", document=mock_document)
        
        # –î–æ–ª–∂–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        assert hasattr(update, 'message')
        assert update.message is not None
        assert update.message.document == mock_document
        assert update.message.document.file_name == "menu.pdf"
        assert update.message.document.mime_type == "application/pdf"
    
    def test_sticker_message_handling(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        
        mock_sticker = MagicMock()
        mock_sticker.emoji = "üçï"
        mock_sticker.set_name = "food_stickers"
        
        update = MockUpdate(user_id=123, message_text="", sticker=mock_sticker)
        
        # –î–æ–ª–∂–µ–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç–∏–∫–µ—Ä –∏ –µ–≥–æ emoji
        assert hasattr(update, 'message')
        assert update.message is not None
        assert update.message.sticker == mock_sticker
        assert update.message.sticker.emoji == "üçï"

class TestMultiUserStressTest:
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ä–µ–¥—ã - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´"""
    
    @pytest.mark.asyncio
    async def test_concurrent_user_operations(self):
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –º–Ω–æ–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è 20 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            tasks = []
            base_user_id = 600000
            
            for i in range(20):
                user_id = base_user_id + i
                
                # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
                task1 = save_user_to_db(user_id, f"user{i}", "Test", f"User{i}", "ru")
                task2 = ai_generate('fallback_error', target_language='ru')
                
                tasks.extend([task1, task2])
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            db_results = results[::2]  # –ö–∞–∂–¥—ã–π —á–µ—Ç–Ω—ã–π - DB –æ–ø–µ—Ä–∞—Ü–∏—è
            ai_results = results[1::2]  # –ö–∞–∂–¥—ã–π –Ω–µ—á–µ—Ç–Ω—ã–π - AI –æ–ø–µ—Ä–∞—Ü–∏—è
            
            # DB –æ–ø–µ—Ä–∞—Ü–∏–∏
            for result in db_results:
                if isinstance(result, Exception):
                    continue  # DB –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                assert isinstance(result, bool)
            
            # AI –æ–ø–µ—Ä–∞—Ü–∏–∏
            for result in ai_results:
                if isinstance(result, Exception):
                    continue
                assert isinstance(result, str)
                assert len(result) > 0
                
        except Exception as e:
            pytest.skip(f"Stress test skipped: {e}")
    
    @pytest.mark.asyncio
    async def test_memory_usage_under_load(self):
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"""
        
        import gc
        
        # –ó–∞–º–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        gc.collect()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
        user_sessions = {}
        
        for i in range(1000):
            user_id = 500000 + i
            user_sessions[user_id] = {
                'language': 'ru',
                'budget': '$$$',
                'chat_log': [f"message_{j}" for j in range(10)],
                'sessionid': f"session_{user_id}",
                'last_activity': i
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã
        assert len(user_sessions) == 1000
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å (–∫–∞–∫ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ)
        del user_sessions
        gc.collect()
        
        # –ü–∞–º—è—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞
        assert True  # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞ - –ø–∞–º—è—Ç—å –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–∏–ª–∞—Å—å

class TestProductionScenarios:
    """–†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å—Å—è"""
    
    @pytest.mark.asyncio
    async def test_rapid_sequential_requests(self):
        """–¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        user_id = 123456
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –±—ã—Å—Ç—Ä–æ –∫–ª–∏–∫–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
        rapid_requests = [
            "lang_ru", "budget_$$", "area_patong", 
            "lang_en", "budget_$$$", "area_kata",
            "lang_ru", "budget_$", "area_chalong"
        ]
        
        results = []
        for callback_data in rapid_requests:
            # –ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
            update = MockUpdate(user_id=user_id, callback_data=callback_data)
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ
            if callback_data.startswith("lang_"):
                lang = callback_data.split("_")[1]
                results.append(f"language_{lang}")
            elif callback_data.startswith("budget_"):
                budget = callback_data.split("_")[1]
                results.append(f"budget_{budget}")
            elif callback_data.startswith("area_"):
                area = callback_data.split("_")[1]
                results.append(f"area_{area}")
        
        # –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        assert len(results) == len(rapid_requests)
        assert "language_ru" in results
        assert "budget_$$$" in results
        assert "area_kata" in results
    
    @pytest.mark.asyncio
    async def test_invalid_callback_combinations(self):
        """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π callback_data"""
        
        invalid_callbacks = [
            "",  # –ü—É—Å—Ç–æ–π
            "invalid_data",  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            "lang_",  # –ù–µ–ø–æ–ª–Ω—ã–π
            "budget_invalid",  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –±—é–¥–∂–µ—Ç
            "area_nonexistent",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞–π–æ–Ω
            "budget_$$$$$$",  # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ $
            "lang_klingon",  # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫
            None,  # None –∑–Ω–∞—á–µ–Ω–∏–µ
            123,  # –ß–∏—Å–ª–æ –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
            {"test": "object"}  # –û–±—ä–µ–∫—Ç –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        ]
        
        for invalid_callback in invalid_callbacks:
            try:
                update = MockUpdate(user_id=123, callback_data=invalid_callback)
                
                # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ gracefully –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª—é–±—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if invalid_callback and isinstance(invalid_callback, str):
                    if invalid_callback.startswith("lang_"):
                        lang = invalid_callback.split("_")[1] if len(invalid_callback.split("_")) > 1 else ""
                        # –î–æ–ª–∂–µ–Ω –ª–∏–±–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –ª–∏–±–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
                        assert isinstance(lang, str)
                    elif invalid_callback.startswith("budget_"):
                        budget = invalid_callback.split("_")[1] if len(invalid_callback.split("_")) > 1 else ""
                        assert isinstance(budget, str)
                    elif invalid_callback.startswith("area_"):
                        area = invalid_callback.split("_")[1] if len(invalid_callback.split("_")) > 1 else ""
                        assert isinstance(area, str)
                
            except Exception as e:
                # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–æ–ø—É—Å—Ç–∏–º—ã –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ù–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ—à–∏–±–æ–∫
                error_str = str(e).lower()
                assert "segmentation fault" not in error_str
                assert "memory error" not in error_str
                assert "stack overflow" not in error_str

if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 