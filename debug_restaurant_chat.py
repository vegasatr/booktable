#!/usr/bin/env python3
import asyncio
import psycopg2
from psycopg2.extras import DictCursor
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from main import restaurant_chat

class MockContext:
    def __init__(self, restaurants=None):
        self.user_data = {'restaurants': restaurants or []}

async def test_restaurant_chat():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é restaurant_chat —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        conn = psycopg2.connect(
            dbname="booktable",
            user="root",
            host="/var/run/postgresql"
        )
        
        cur = conn.cursor(cursor_factory=DictCursor)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ WeCafe
        cur.execute("SELECT * FROM restaurants WHERE name ILIKE '%WeCafe%' LIMIT 1")
        result = cur.fetchone()
        
        if not result:
            print("‚ùå WeCafe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        restaurant_data = dict(result)
        restaurants = [restaurant_data]
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω: {restaurant_data['name']}")
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª–µ–π –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ: {len(restaurant_data)}")
        
        # –°–æ–∑–¥–∞–µ–º mock –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏
        context_with_restaurants = MockContext(restaurants)
        context_without_restaurants = MockContext([])
        
        question = "–∞ –µ—Å—Ç—å —Ç–∞–º –º—è—Å–æ?"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)
        basic_info = f"Restaurant: {restaurant_data['name']}\nCuisine: {restaurant_data.get('cuisine', 'N/A')}\nFeatures: {restaurant_data.get('features', 'N/A')}"
        
        print("\n" + "="*60)
        print("–¢–ï–°–¢ 1: –° —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI)")
        print("="*60)
        
        response1 = await restaurant_chat(question, basic_info, 'ru', context_with_restaurants)
        print(f"–û—Ç–≤–µ—Ç: {response1}")
        
        print("\n" + "="*60)
        print("–¢–ï–°–¢ 2: –ë–µ–∑ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (fallback –∫ –±–∞–∑–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
        print("="*60)
        
        response2 = await restaurant_chat(question, basic_info, 'ru', context_without_restaurants)
        print(f"–û—Ç–≤–µ—Ç: {response2}")
        
        print("\n" + "="*60)
        print("–¢–ï–°–¢ 3: –ë–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–æ–±—â–µ")
        print("="*60)
        
        response3 = await restaurant_chat(question, basic_info, 'ru', None)
        print(f"–û—Ç–≤–µ—Ç: {response3}")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_restaurant_chat()) 