#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã bookings
–ò–∑–º–µ–Ω—è–µ—Ç –Ω—É–º–µ—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –Ω–∞—á–∏–Ω–∞—Ç—å —Å 1000
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.bot.database.connection import get_db_connection
from psycopg2.extras import DictCursor

def check_bookings_table():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã bookings"""
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=DictCursor)
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã bookings...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'bookings'
            );
        """)
        table_exists = cur.fetchone()[0]
        
        if not table_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ bookings –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
            
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ bookings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("""
            SELECT column_name, data_type, column_default, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'bookings'
            ORDER BY ordinal_position;
        """)
        columns = cur.fetchall()
        
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã bookings:")
        for col in columns:
            print(f"  - {col['column_name']}: {col['data_type']} (default: {col['column_default']}, nullable: {col['is_nullable']})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
        cur.execute("SELECT COUNT(*) FROM bookings;")
        count = cur.fetchone()[0]
        print(f"\nüìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ bookings: {count}")
        
        if count > 0:
            cur.execute("SELECT booking_number FROM bookings ORDER BY booking_number;")
            booking_numbers = [row[0] for row in cur.fetchall()]
            print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {booking_numbers}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            max_booking = max(booking_numbers)
            print(f"üî¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {max_booking}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sequence (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
            try:
                cur.execute("""
                    SELECT last_value FROM bookings_booking_number_seq;
                """)
                last_value = cur.fetchone()[0]
                print(f"üî¢ –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sequence: {last_value}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ sequence: {e}")
        else:
            print("üìã –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
        
        cur.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã bookings: {e}")
        return False

def update_sequence_to_1000():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç sequence booking_number –Ω–∞—á–∏–Ω–∞—è —Å 1000"""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        
        print("\nüîß –û–±–Ω–æ–≤–ª—è–µ–º sequence –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å 1000...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sequence –≤ 1000
        cur.execute("""
            SELECT setval(pg_get_serial_sequence('bookings', 'booking_number'), 1000, false);
        """)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        cur.execute("""
            SELECT nextval(pg_get_serial_sequence('bookings', 'booking_number'));
        """)
        next_val = cur.fetchone()[0]
        
        if next_val == 1000:
            print("‚úÖ Sequence —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –°–ª–µ–¥—É—é—â–∏–π booking_number –±—É–¥–µ—Ç: 1000")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º sequence –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ (nextval —É–≤–µ–ª–∏—á–∏–ª –µ–≥–æ)
            cur.execute("""
                SELECT setval(pg_get_serial_sequence('bookings', 'booking_number'), 999, true);
            """)
            
            conn.commit()
            print("‚úÖ Sequence –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –°–ª–µ–¥—É—é—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç –Ω–æ–º–µ—Ä 1000")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª—Å—è –Ω–æ–º–µ—Ä 1000, –ø–æ–ª—É—á–µ–Ω {next_val}")
        
        cur.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ sequence: {e}")
        if conn:
            conn.rollback()
            cur.close()
            conn.close()
        return False

def test_booking_number_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–º–µ—Ä–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    try:
        from datetime import date, time
        from src.bot.database.bookings import save_booking_to_db
        import asyncio
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking_number = asyncio.run(save_booking_to_db(
            restaurant_name="Test Restaurant",
            client_name="Test User",
            phone="+1234567890",
            date_booking=date.today(),
            time_booking=time(19, 30),
            guests=2,
            restaurant_contact="test@example.com",
            booking_method="telegram",
            preferences="Test booking",
            client_code=12345,
            status="pending"
        ))
        
        if booking_number:
            print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å –Ω–æ–º–µ—Ä–æ–º: {booking_number}")
            
            if booking_number >= 1000:
                print("‚úÖ –ù—É–º–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (>= 1000)")
            else:
                print(f"‚ùå –ù—É–º–µ—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {booking_number} < 1000")
                
            return booking_number
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bookings")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
    if not check_bookings_table():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É bookings")
        return
    
    # –®–∞–≥ 2: –û–±–Ω–æ–≤–ª—è–µ–º sequence
    print("\n" + "=" * 50)
    if not update_sequence_to_1000():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å sequence")
        return
    
    # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    print("\n" + "=" * 50)
    test_booking_number = test_booking_number_generation()
    
    if test_booking_number and test_booking_number >= 1000:
        print(f"\nüéâ –£–°–ü–ï–•! –ù—É–º–µ—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 1000+")
        print(f"   –¢–µ—Å—Ç–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ –Ω–æ–º–µ—Ä: {test_booking_number}")
    else:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê! –ù—É–º–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("\n" + "=" * 50)

if __name__ == "__main__":
    main() 