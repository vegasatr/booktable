#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö BookTable.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å SELECT, UPDATE, INSERT –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã:
   python3 scripts/db_tool.py --action select --table restaurants --fields "name,booking_contact"

2. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:
   python3 scripts/db_tool.py --action update --table restaurants --set "booking_contact='@alextex'" --where "name='Nitan'"

3. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã:
   python3 scripts/db_tool.py --action describe --table restaurants

4. –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
   python3 scripts/db_tool.py --action select --table bookings --fields "*" --where "booking_number > 1" --limit 10

5. –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–∞–ø–∏—Å–∏:
   python3 scripts/db_tool.py --action count --table restaurants --where "active = true"

6. –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:
   python3 scripts/db_tool.py --action query --sql "SELECT COUNT(*) FROM bookings WHERE date >= '2025-01-01'"

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- PostgreSQL –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω
- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö booktable –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ
"""

import argparse
import psycopg2
from psycopg2.extras import DictCursor
import sys

def connect_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = psycopg2.connect(
            dbname="booktable",
            user="root",
            host="/var/run/postgresql"
        )
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        sys.exit(1)

def action_select(args):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç SELECT –∑–∞–ø—Ä–æ—Å"""
    conn = connect_db()
    cur = conn.cursor(cursor_factory=DictCursor)
    
    fields = args.fields if args.fields else "*"
    query = f"SELECT {fields} FROM {args.table}"
    
    if args.where:
        query += f" WHERE {args.where}"
    
    if args.order:
        query += f" ORDER BY {args.order}"
        
    if args.limit:
        query += f" LIMIT {args.limit}"
    
    print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º: {query}")
    
    try:
        cur.execute(query)
        rows = cur.fetchall()
        
        if rows:
            print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
            print("-" * 80)
            
            for i, row in enumerate(rows, 1):
                print(f"–ó–∞–ø–∏—Å—å #{i}:")
                for key, value in row.items():
                    print(f"  {key}: {value}")
                print("-" * 40)
        else:
            print("üì≠ –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SELECT: {e}")
    finally:
        cur.close()
        conn.close()

def action_update(args):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç UPDATE –∑–∞–ø—Ä–æ—Å"""
    if not args.set:
        print("‚ùå –î–ª—è UPDATE –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å --set")
        return
        
    conn = connect_db()
    cur = conn.cursor(cursor_factory=DictCursor)
    
    query = f"UPDATE {args.table} SET {args.set}"
    
    if args.where:
        query += f" WHERE {args.where}"
    else:
        print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! UPDATE –±–µ–∑ WHERE –∏–∑–º–µ–Ω–∏—Ç –í–°–ï –∑–∞–ø–∏—Å–∏!")
        confirm = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if confirm.lower() != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    print(f"üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º: {query}")
    
    try:
        cur.execute(query)
        affected = cur.rowcount
        conn.commit()
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {affected}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è UPDATE: {e}")
        conn.rollback()
    finally:
        cur.close()
        conn.close()

def action_count(args):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"""
    conn = connect_db()
    cur = conn.cursor(cursor_factory=DictCursor)
    
    query = f"SELECT COUNT(*) as count FROM {args.table}"
    
    if args.where:
        query += f" WHERE {args.where}"
    
    print(f"üî¢ –í—ã–ø–æ–ª–Ω—è–µ–º: {query}")
    
    try:
        cur.execute(query)
        result = cur.fetchone()
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {result['count']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è COUNT: {e}")
    finally:
        cur.close()
        conn.close()

def action_describe(args):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
    conn = connect_db()
    cur = conn.cursor(cursor_factory=DictCursor)
    
    query = """
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = %s AND table_schema = 'public'
        ORDER BY ordinal_position
    """
    
    print(f"üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã {args.table}:")
    
    try:
        cur.execute(query, (args.table,))
        columns = cur.fetchall()
        
        if columns:
            print("-" * 80)
            print(f"{'–ü–æ–ª–µ':<20} {'–¢–∏–ø':<20} {'NULL':<8} {'–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é':<20}")
            print("-" * 80)
            
            for col in columns:
                default = col['column_default'] or ''
                if len(default) > 18:
                    default = default[:15] + '...'
                    
                print(f"{col['column_name']:<20} {col['data_type']:<20} {col['is_nullable']:<8} {default:<20}")
        else:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{args.table}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
    finally:
        cur.close()
        conn.close()

def action_query(args):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å"""
    if not args.sql:
        print("‚ùå –î–ª—è --action query –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å --sql")
        return
        
    conn = connect_db()
    cur = conn.cursor(cursor_factory=DictCursor)
    
    print(f"‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º: {args.sql}")
    
    try:
        cur.execute(args.sql)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        if args.sql.strip().upper().startswith('SELECT'):
            rows = cur.fetchall()
            if rows:
                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç ({len(rows)} –∑–∞–ø–∏—Å–µ–π):")
                print("-" * 80)
                
                for i, row in enumerate(rows, 1):
                    print(f"–ó–∞–ø–∏—Å—å #{i}:")
                    for key, value in row.items():
                        print(f"  {key}: {value}")
                    print("-" * 40)
            else:
                print("üì≠ –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            # –î–ª—è UPDATE/INSERT/DELETE
            affected = cur.rowcount
            conn.commit()
            print(f"‚úÖ –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ –∑–∞–ø–∏—Å–µ–π: {affected}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        if 'UPDATE' in args.sql.upper() or 'INSERT' in args.sql.upper() or 'DELETE' in args.sql.upper():
            conn.rollback()
    finally:
        cur.close()
        conn.close()

def main():
    parser = argparse.ArgumentParser(description='–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î BookTable')
    
    parser.add_argument('--action', required=True, 
                       choices=['select', 'update', 'count', 'describe', 'query'],
                       help='–î–µ–π—Å—Ç–≤–∏–µ: select/update/count/describe/query')
    
    parser.add_argument('--table', help='–ò–º—è —Ç–∞–±–ª–∏—Ü—ã')
    parser.add_argument('--fields', help='–ü–æ–ª—è –¥–ª—è SELECT (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    parser.add_argument('--where', help='–£—Å–ª–æ–≤–∏–µ WHERE')
    parser.add_argument('--set', help='–ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è UPDATE (–ø–æ–ª–µ=–∑–Ω–∞—á–µ–Ω–∏–µ)')
    parser.add_argument('--order', help='–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ORDER BY')
    parser.add_argument('--limit', type=int, help='–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ LIMIT')
    parser.add_argument('--sql', help='–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if args.action in ['select', 'update', 'count', 'describe'] and not args.table:
        print("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å --table")
        sys.exit(1)
    
    if args.action == 'query' and not args.sql:
        print("‚ùå –î–ª—è --action query –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å --sql")
        sys.exit(1)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    if args.action == 'select':
        action_select(args)
    elif args.action == 'update':
        action_update(args)
    elif args.action == 'count':
        action_count(args)
    elif args.action == 'describe':
        action_describe(args)
    elif args.action == 'query':
        action_query(args)

if __name__ == "__main__":
    main() 