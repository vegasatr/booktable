#!/bin/bash

# –£–ú–ù–´–ô –°–ö–†–ò–ü–¢ –ó–ê–õ–ò–í–ö–ò –ù–ê GIT –° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú
# ============================================
# 
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≥–æ–Ω—è–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
# –ø–µ—Ä–µ–¥ –∑–∞–ª–∏–≤–∫–æ–π –Ω–∞ GitHub. –ó–∞–ª–∏–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏.
#
# –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
# 1. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö unit —Ç–µ—Å—Ç–æ–≤
# 2. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö integration —Ç–µ—Å—Ç–æ–≤  
# 3. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ -> git push
# 4. –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ -> –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ—à–∏–±–∫–æ–π
#
# –ü—Ä–∞–≤–∏–ª–∞ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:
# - –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ (1.x.x) - –º–∞–∂–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è, –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
# - –í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ (x.1.x) - –º–∏–Ω–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è, –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
# - –¢—Ä–µ—Ç—å–µ —á–∏—Å–ª–æ (x.x.1) - –ø–∞—Ç—á-–≤–µ—Ä—Å–∏—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫

cd /root/booktable_bot
source venv/bin/activate

echo "================== BOOKTABLE BOT - SMART GIT PUSH =================="
echo "Date: $(date)"
echo "======================================================================"

# –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
CURRENT_VERSION=$(cat version.txt)
echo "üìã Current version: $CURRENT_VERSION"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
patch=$((patch + 1))  # –í—Å–µ–≥–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ç—á-–≤–µ—Ä—Å–∏—é

NEW_VERSION="$major.$minor.$patch"
echo "üÜï New version will be: $NEW_VERSION"

echo ""
echo "üß™ RUNNING COMPREHENSIVE TESTS BEFORE GIT PUSH..."
echo "=================================================================="

# –≠–¢–ê–ü 1: UNIT –¢–ï–°–¢–´
echo ""
echo "1Ô∏è‚É£ RUNNING UNIT TESTS:"
echo "   Testing all core functions..."

unit_tests_failed=0

# AI Core —Ç–µ—Å—Ç—ã
echo "   ‚îî‚îÄ‚îÄ AI Core tests..."
python -m pytest tests/unit/test_ai_core.py -q --tb=no
if [ $? -ne 0 ]; then
    echo "       ‚ùå AI Core tests FAILED"
    unit_tests_failed=1
else
    echo "       ‚úÖ AI Core tests PASSED"
fi

# Database —Ç–µ—Å—Ç—ã
echo "   ‚îî‚îÄ‚îÄ Database tests..."
python -m pytest tests/unit/test_database_users.py -q --tb=no
if [ $? -ne 0 ]; then
    echo "       ‚ùå Database tests FAILED"
    unit_tests_failed=1
else
    echo "       ‚úÖ Database tests PASSED"
fi

# Translation —Ç–µ—Å—Ç—ã (–¥–æ–ø—É—Å–∫–∞–µ–º legacy –æ—à–∏–±–∫–∏)
echo "   ‚îî‚îÄ‚îÄ Translation tests..."
python -m pytest tests/unit/test_ai_translation.py -q --tb=no
if [ $? -ne 0 ]; then
    echo "       ‚ö†Ô∏è  Translation tests have legacy issues (allowed)"
else
    echo "       ‚úÖ Translation tests PASSED"
fi

# –≠–¢–ê–ü 2: INTEGRATION –¢–ï–°–¢–´
echo ""
echo "2Ô∏è‚É£ RUNNING INTEGRATION TESTS:"
echo "   Testing full workflows and API integration..."

integration_tests_failed=0

# Bot Workflow —Ç–µ—Å—Ç—ã
echo "   ‚îî‚îÄ‚îÄ Bot workflow integration..."
python -m pytest tests/integration/test_bot_workflow.py -q --tb=no
if [ $? -ne 0 ]; then
    echo "       ‚ùå Bot workflow tests FAILED"
    integration_tests_failed=1
else
    echo "       ‚úÖ Bot workflow tests PASSED"
fi

# External APIs —Ç–µ—Å—Ç—ã
echo "   ‚îî‚îÄ‚îÄ External APIs integration..."
python -m pytest tests/integration/test_external_apis.py -q --tb=no
if [ $? -ne 0 ]; then
    echo "       ‚ùå External APIs tests FAILED"
    integration_tests_failed=1
else
    echo "       ‚úÖ External APIs tests PASSED"
fi

# Edge Cases —Ç–µ—Å—Ç—ã
echo "   ‚îî‚îÄ‚îÄ Edge cases and error handling..."
python -m pytest tests/integration/test_edge_cases.py -q --tb=no
if [ $? -ne 0 ]; then
    echo "       ‚ùå Edge cases tests FAILED"
    integration_tests_failed=1
else
    echo "       ‚úÖ Edge cases tests PASSED"
fi

# –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–û–í
echo ""
echo "üìä TEST RESULTS ANALYSIS:"
echo "=========================="

total_failed=$((unit_tests_failed + integration_tests_failed))

if [ $total_failed -eq 0 ]; then
    echo "üéâ ALL TESTS PASSED! Ready for git push."
    test_status="‚úÖ PASSED"
else
    echo "‚ùå SOME TESTS FAILED! Cannot push to git."
    if [ $unit_tests_failed -eq 1 ]; then
        echo "   - Unit tests have failures"
    fi
    if [ $integration_tests_failed -eq 1 ]; then
        echo "   - Integration tests have failures"
    fi
    test_status="‚ùå FAILED"
fi

echo ""
echo "üéØ FINAL DECISION:"
echo "=================="

if [ $total_failed -eq 0 ]; then
    echo "‚úÖ Tests: PASSED -> Proceeding with git push"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    commit_message="Automated update: comprehensive testing passed v$NEW_VERSION"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ñ–∞–π–ª–µ
    echo "$NEW_VERSION" > version.txt
    
    echo ""
    echo "üì§ PUSHING TO GITHUB:"
    echo "===================="
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git
    echo "   Adding changes to git..."
    git add .
    
    echo "   Creating commit..."
    git commit -m "$commit_message"
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –≤–µ—Ä—Å–∏–∏
    BRANCH_NAME="v$NEW_VERSION"
    echo "   Creating branch: $BRANCH_NAME"
    git checkout -b "$BRANCH_NAME"
    
    echo "   Pushing to GitHub..."
    git push origin "$BRANCH_NAME"
    
    echo ""
    echo "üéâ SUCCESS! Changes pushed to GitHub"
    echo "   Version: $NEW_VERSION"
    echo "   Branch: $BRANCH_NAME"
    echo "   Tests: All passed ‚úÖ"
    echo "   Commit: $commit_message"
    
else
    echo "üö´ PUSH ABORTED! Tests must pass before git push."
    echo ""
    echo "üîß TO FIX THE ISSUES:"
    echo "1. Run detailed tests to see failures:"
    echo "   ./scripts/run_tests.sh"
    echo "   ./scripts/run_integration_tests.sh"
    echo ""
    echo "2. Fix the failing tests"
    echo ""
    echo "3. Run this script again"
    echo ""
    echo "‚ùå Git push cancelled - version remains $CURRENT_VERSION"
    
    exit 1
fi

echo ""
echo "=================== END SMART GIT PUSH =====================" 