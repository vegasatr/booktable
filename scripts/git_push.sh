#!/bin/bash

# –£–ú–ù–´–ô –°–ö–†–ò–ü–¢ –ó–ê–õ–ò–í–ö–ò –ù–ê GIT –° –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú –ò –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
# ==========================================================
# 
# –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–æ–≥–æ–Ω—è–µ—Ç –≤—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
# –ø–µ—Ä–µ–¥ –∑–∞–ª–∏–≤–∫–æ–π –Ω–∞ GitHub. –ó–∞–ª–∏–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏.
#
# –ù–û–í–û–ï v1.0.56:
# - –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ logs/git_push.log
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ push
# - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ —Ç–µ—Å—Ç–æ–≤
#
# –ü–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π:
# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤
# 2. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö unit —Ç–µ—Å—Ç–æ–≤ (—Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏)
# 3. –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö integration —Ç–µ—Å—Ç–æ–≤ (—Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏)
# 4. –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ -> git push
# 5. –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏ -> –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –æ—à–∏–±–∫–æ–π

cd /root/booktable_bot
source venv/bin/activate

# –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
LOG_FILE="logs/git_push.log"
mkdir -p logs

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

log_file() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–æ–∫
run_detailed_test() {
    local test_name="$1"
    local test_path="$2"
    local timeout_duration="$3"
    
    log "   ‚îî‚îÄ‚îÄ $test_name..."
    log_file "Starting $test_name..."
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
    local temp_result_file="/tmp/test_result_$$.txt"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    timeout "$timeout_duration" python -m pytest "$test_path" -v --tb=short > "$temp_result_file" 2>&1
    local test_result=$?
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞ –≤ —Ñ–∞–π–ª
    cat "$temp_result_file" >> "$LOG_FILE"
    
    if [ $test_result -ne 0 ]; then
        log "       ‚ùå $test_name FAILED (exit code: $test_result)"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø–∞–≤—à–∏–µ —Ç–µ—Å—Ç—ã
        local failed_tests=$(grep "FAILED" "$temp_result_file" | head -5)
        if [ -n "$failed_tests" ]; then
            log "       üîç FAILED TESTS:"
            echo "$failed_tests" | while read -r line; do
                log "          ‚Üí $line"
            done
        fi
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
        local error_summary=$(grep -A 2 "FAILURES\|ERROR" "$temp_result_file" | head -10)
        if [ -n "$error_summary" ]; then
            log "       üìã ERROR SUMMARY:"
            echo "$error_summary" | while read -r line; do
                if [ -n "$line" ]; then
                    log "          $line"
                fi
            done
        fi
        
        rm -f "$temp_result_file"
        return 1
    else
        log "       ‚úÖ $test_name PASSED"
        rm -f "$temp_result_file"
        return 0
    fi
}

# –ù–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log "================== BOOKTABLE BOT - SMART GIT PUSH =================="
log "Starting git push process with comprehensive testing"

# –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
CURRENT_VERSION=$(cat version.txt)
log "üìã Current version: $CURRENT_VERSION"

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
patch=$((patch + 1))  # –í—Å–µ–≥–¥–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—Ç—á-–≤–µ—Ä—Å–∏—é

NEW_VERSION="$major.$minor.$patch"
log "üÜï New version will be: $NEW_VERSION"

# –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ë–û–¢–û–í
log ""
log "ü§ñ CHECKING BOT STATUS:"
log "======================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
MAIN_BOT_PID=$(pgrep -f "python.*main.py" | head -1)
if [ -n "$MAIN_BOT_PID" ]; then
    log "‚úÖ Main bot is running (PID: $MAIN_BOT_PID)"
    main_bot_status="RUNNING"
else
    log "‚ùå Main bot is NOT running"
    main_bot_status="STOPPED"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
MANAGERS_BOT_PID=$(pgrep -f "python.*bt_bookings_bot.py" | head -1)
if [ -n "$MANAGERS_BOT_PID" ]; then
    log "‚úÖ Managers bot is running (PID: $MANAGERS_BOT_PID)"
    managers_bot_status="RUNNING"
else
    log "‚ùå Managers bot is NOT running"
    managers_bot_status="STOPPED"
fi

log ""
log "üß™ RUNNING COMPREHENSIVE TESTS BEFORE GIT PUSH..."
log "=================================================================="

# –≠–¢–ê–ü 1: UNIT –¢–ï–°–¢–´
log ""
log "1Ô∏è‚É£ RUNNING UNIT TESTS:"
log "   Testing all core functions..."

unit_tests_failed=0

# AI Core —Ç–µ—Å—Ç—ã
if ! run_detailed_test "AI Core tests" "tests/unit/test_ai_core.py" 60; then
    unit_tests_failed=1
fi

# Database —Ç–µ—Å—Ç—ã
if ! run_detailed_test "Database tests" "tests/unit/test_database_users.py" 30; then
    unit_tests_failed=1
fi

# Booking Database —Ç–µ—Å—Ç—ã
if ! run_detailed_test "Booking Database tests" "tests/unit/test_database_bookings.py" 30; then
    unit_tests_failed=1
fi

# Booking Notifications —Ç–µ—Å—Ç—ã
if ! run_detailed_test "Booking Notifications tests" "tests/unit/test_booking_notifications.py" 30; then
    unit_tests_failed=1
fi

# Translation —Ç–µ—Å—Ç—ã (–¥–æ–ø—É—Å–∫–∞–µ–º legacy –æ—à–∏–±–∫–∏)
log "   ‚îî‚îÄ‚îÄ Translation tests..."
log_file "Starting Translation tests..."
timeout 60 python -m pytest tests/unit/test_ai_translation.py -q --tb=no >> "$LOG_FILE" 2>&1
test_result=$?
if [ $test_result -eq 124 ]; then
    log "       ‚ö†Ô∏è  Translation tests TIMEOUT (allowed for legacy issues)"
elif [ $test_result -ne 0 ]; then
    log "       ‚ö†Ô∏è  Translation tests have legacy issues (allowed)"
else
    log "       ‚úÖ Translation tests PASSED"
fi

# –≠–¢–ê–ü 2: INTEGRATION –¢–ï–°–¢–´
log ""
log "2Ô∏è‚É£ RUNNING INTEGRATION TESTS:"
log "   Testing full workflows and API integration..."

integration_tests_failed=0

# Bot Workflow —Ç–µ—Å—Ç—ã
if ! run_detailed_test "Bot workflow tests" "tests/integration/test_bot_workflow.py" 90; then
    integration_tests_failed=1
fi

# External APIs —Ç–µ—Å—Ç—ã
if ! run_detailed_test "External APIs tests" "tests/integration/test_external_apis.py" 60; then
    integration_tests_failed=1
fi

# Edge Cases —Ç–µ—Å—Ç—ã
if ! run_detailed_test "Edge cases tests" "tests/integration/test_edge_cases.py" 120; then
    integration_tests_failed=1
fi

# –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–û–í
log ""
log "üìä TEST RESULTS ANALYSIS:"
log "=========================="

total_failed=$((unit_tests_failed + integration_tests_failed))

if [ $total_failed -eq 0 ]; then
    log "üéâ ALL TESTS PASSED! Ready for git push."
    test_status="‚úÖ PASSED"
else
    log "‚ùå SOME TESTS FAILED! Cannot push to git."
    if [ $unit_tests_failed -eq 1 ]; then
        log "   - Unit tests have failures"
    fi
    if [ $integration_tests_failed -eq 1 ]; then
        log "   - Integration tests have failures"
    fi
    test_status="‚ùå FAILED"
fi

log ""
log "üéØ FINAL DECISION:"
log "=================="

if [ $total_failed -eq 0 ]; then
    log "‚úÖ Tests: PASSED -> Proceeding with git push"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    commit_message="Automated update: comprehensive testing passed v$NEW_VERSION"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ñ–∞–π–ª–µ
    echo "$NEW_VERSION" > version.txt
    
    log ""
    log "üì§ PUSHING TO GITHUB:"
    log "===================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    CURRENT_BRANCH=$(git branch --show-current)
    BRANCH_NAME="v$NEW_VERSION"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git
    log "   Adding changes to git..."
    git add . >> "$LOG_FILE" 2>&1
    
    log "   Creating commit..."
    git commit -m "$commit_message" >> "$LOG_FILE" 2>&1
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –≤–µ—Ä—Å–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if [ "$CURRENT_BRANCH" != "$BRANCH_NAME" ]; then
        log "   Creating branch: $BRANCH_NAME"
        git checkout -b "$BRANCH_NAME" >> "$LOG_FILE" 2>&1
    else
        log "   Already on branch: $BRANCH_NAME"
    fi
    
    log "   Pushing to GitHub..."
    git push origin "$BRANCH_NAME" >> "$LOG_FILE" 2>&1
    push_result=$?
    
    if [ $push_result -eq 0 ]; then
        log ""
        log "üéâ SUCCESS! Changes pushed to GitHub"
        log "   Version: $NEW_VERSION"
        log "   Branch: $BRANCH_NAME"
        log "   Tests: All passed ‚úÖ"
        log "   Main Bot: $main_bot_status"
        log "   Managers Bot: $managers_bot_status"
        log "   Commit: $commit_message"
        log_file "Git push completed successfully"
    else
        log "‚ùå Git push FAILED (exit code: $push_result)"
        log_file "Git push failed with exit code: $push_result"
    fi
    
else
    log "üö´ PUSH ABORTED! Tests must pass before git push."
    log ""
    log "üîß TO FIX THE ISSUES:"
    log "1. Check detailed test results in: $LOG_FILE"
    log "2. Run individual tests to see failures:"
    log "   ./scripts/run_tests.sh"
    log "   ./scripts/run_integration_tests.sh"
    log ""
    log "3. Fix the failing tests and try again"
    log_file "Git push aborted due to test failures"
fi

log ""
log "üìã SUMMARY:"
log "==========="
log "Version: $CURRENT_VERSION -> $NEW_VERSION"
log "Tests: $test_status"
log "Main Bot: $main_bot_status"
log "Managers Bot: $managers_bot_status"
log "Log file: $LOG_FILE"
log "================== GIT PUSH PROCESS COMPLETED ==================" 