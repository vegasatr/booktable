#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import asyncio
from datetime import date, time
from src.bot.managers.booking_manager import BookingManager

# Mock user –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockUser:
    def __init__(self):
        self.id = 99999
        self.first_name = "Test"
        self.last_name = "User"
        self.username = "test_user"

async def test_notification_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking_data = {
        'date': date.today(),
        'time': time(19, 30),
        'guests': 3
    }
    
    user = MockUser()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    test_contacts = [
        "@test_username",
        "https://t.me/test_restaurant", 
        "1234567890",  # Chat ID
        "+66987654321",  # –¢–µ–ª–µ—Ñ–æ–Ω
        "invalid_contact",  # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        "",  # –ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–∞–∫—Ç
    ]
    
    for i, contact in enumerate(test_contacts, 1):
        print(f"\nüîç –¢–µ—Å—Ç {i}: –ö–æ–Ω—Ç–∞–∫—Ç '{contact}'")
        try:
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await BookingManager._notify_restaurant(
                booking_number=2000 + i,
                booking_data=booking_data,
                restaurant_contact=contact,
                user=user
            )
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–µ–∑ –æ—à–∏–±–æ–∫")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    print("\n" + "=" * 60)
    print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("   –ö–æ–º–∞–Ω–¥–∞: tail -f /root/booktable_bot/logs/bot.log | grep BOOKING")

def check_restaurant_contacts():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from src.bot.database.connection import get_db_connection
        from psycopg2.extras import DictCursor
        
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=DictCursor)
        
        print("\nüìã –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        print("-" * 50)
        
        cur.execute("""
            SELECT name, booking_contact, phone, website 
            FROM restaurants 
            WHERE booking_contact IS NOT NULL AND booking_contact != ''
            ORDER BY name
            LIMIT 10;
        """)
        
        restaurants = cur.fetchall()
        
        if restaurants:
            for rest in restaurants:
                print(f"üçΩÔ∏è {rest['name']}")
                print(f"   üìû booking_contact: {rest['booking_contact']}")
                print(f"   üì± phone: {rest['phone']}")
                print(f"   üåê website: {rest['website']}")
                print()
        else:
            print("‚ùå –ù–µ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            
        cur.close()
        conn.close()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ –±–∞–∑–µ
    check_restaurant_contacts()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await test_notification_system()

if __name__ == "__main__":
    asyncio.run(main()) 